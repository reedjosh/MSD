
stim_timer_skel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800100  00000c00  00000c94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800178  00800178  00000d0c  2**0
                  ALLOC
  3 .stab         00001f80  00000000  00000000  00000d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000102c  00000000  00000000  00002c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003cb8  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003ccc  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00003d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00004488  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  00004ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000280  00000000  00000000  00004bbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e0       	ldi	r30, 0x00	; 0
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 37       	cpi	r26, 0x78	; 120
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e7       	ldi	r26, 0x78	; 120
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 38       	cpi	r26, 0x88	; 136
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 23 04 	call	0x846	; 0x846 <main>
  c6:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <strobe_lcd>:
}


void strobe_lcd(void) {
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
  ce:	e2 e6       	ldi	r30, 0x62	; 98
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	80 83       	st	Z, r24
	PORTF &= ~0x08;
  d8:	80 81       	ld	r24, Z
  da:	87 7f       	andi	r24, 0xF7	; 247
  dc:	80 83       	st	Z, r24
  de:	08 95       	ret

000000e0 <LCD_Clr>:
}

void LCD_Clr(void) {
	LCD_CMD(0x01);
  e0:	1f b8       	out	0x0f, r1	; 15
  e2:	77 9b       	sbis	0x0e, 7	; 14
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <LCD_Clr+0x2>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	8f b9       	out	0x0f, r24	; 15
  ea:	77 9b       	sbis	0x0e, 7	; 14
  ec:	fe cf       	rjmp	.-4      	; 0xea <LCD_Clr+0xa>
  ee:	80 91 62 00 	lds	r24, 0x0062
  f2:	88 60       	ori	r24, 0x08	; 8
  f4:	80 93 62 00 	sts	0x0062, r24
  f8:	80 91 62 00 	lds	r24, 0x0062
  fc:	87 7f       	andi	r24, 0xF7	; 247
  fe:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	8f e8       	ldi	r24, 0x8F	; 143
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_Clr+0x26>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_Clr+0x2c>
 10c:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	8f e3       	ldi	r24, 0x3F	; 63
 110:	9f e1       	ldi	r25, 0x1F	; 31
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_Clr+0x32>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_Clr+0x38>
 118:	00 00       	nop
 11a:	08 95       	ret

0000011c <LCD_MovCursorLn1>:
	_delay_ms(2);   //obligatory waiting for slow LCD
}

void LCD_MovCursorLn1(void) {
	LCD_CMD(0x80);
 11c:	1f b8       	out	0x0f, r1	; 15
 11e:	77 9b       	sbis	0x0e, 7	; 14
 120:	fe cf       	rjmp	.-4      	; 0x11e <LCD_MovCursorLn1+0x2>
 122:	80 e8       	ldi	r24, 0x80	; 128
 124:	8f b9       	out	0x0f, r24	; 15
 126:	77 9b       	sbis	0x0e, 7	; 14
 128:	fe cf       	rjmp	.-4      	; 0x126 <LCD_MovCursorLn1+0xa>
 12a:	80 91 62 00 	lds	r24, 0x0062
 12e:	88 60       	ori	r24, 0x08	; 8
 130:	80 93 62 00 	sts	0x0062, r24
 134:	80 91 62 00 	lds	r24, 0x0062
 138:	87 7f       	andi	r24, 0xF7	; 247
 13a:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	8f e8       	ldi	r24, 0x8F	; 143
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_MovCursorLn1+0x26>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_MovCursorLn1+0x2c>
 148:	00 00       	nop
 14a:	08 95       	ret

0000014c <LCD_MovCursorLn2>:
}

void LCD_MovCursorLn2(void) {
	LCD_CMD(0xC0);
 14c:	1f b8       	out	0x0f, r1	; 15
 14e:	77 9b       	sbis	0x0e, 7	; 14
 150:	fe cf       	rjmp	.-4      	; 0x14e <LCD_MovCursorLn2+0x2>
 152:	80 ec       	ldi	r24, 0xC0	; 192
 154:	8f b9       	out	0x0f, r24	; 15
 156:	77 9b       	sbis	0x0e, 7	; 14
 158:	fe cf       	rjmp	.-4      	; 0x156 <LCD_MovCursorLn2+0xa>
 15a:	80 91 62 00 	lds	r24, 0x0062
 15e:	88 60       	ori	r24, 0x08	; 8
 160:	80 93 62 00 	sts	0x0062, r24
 164:	80 91 62 00 	lds	r24, 0x0062
 168:	87 7f       	andi	r24, 0xF7	; 247
 16a:	80 93 62 00 	sts	0x0062, r24
 16e:	8f e8       	ldi	r24, 0x8F	; 143
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_MovCursorLn2+0x26>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_MovCursorLn2+0x2c>
 178:	00 00       	nop
 17a:	08 95       	ret

0000017c <LCD_CursorBlinkOn>:
}

void LCD_CursorBlinkOn(void) {
	LCD_CMD(0x0F);
 17c:	1f b8       	out	0x0f, r1	; 15
 17e:	77 9b       	sbis	0x0e, 7	; 14
 180:	fe cf       	rjmp	.-4      	; 0x17e <LCD_CursorBlinkOn+0x2>
 182:	8f e0       	ldi	r24, 0x0F	; 15
 184:	8f b9       	out	0x0f, r24	; 15
 186:	77 9b       	sbis	0x0e, 7	; 14
 188:	fe cf       	rjmp	.-4      	; 0x186 <LCD_CursorBlinkOn+0xa>
 18a:	80 91 62 00 	lds	r24, 0x0062
 18e:	88 60       	ori	r24, 0x08	; 8
 190:	80 93 62 00 	sts	0x0062, r24
 194:	80 91 62 00 	lds	r24, 0x0062
 198:	87 7f       	andi	r24, 0xF7	; 247
 19a:	80 93 62 00 	sts	0x0062, r24
 19e:	8f e8       	ldi	r24, 0x8F	; 143
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCD_CursorBlinkOn+0x26>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <LCD_CursorBlinkOn+0x2c>
 1a8:	00 00       	nop
 1aa:	08 95       	ret

000001ac <LCD_CursorBlinkOff>:
}

void LCD_CursorBlinkOff(void) {
	LCD_CMD(0x0C);
 1ac:	1f b8       	out	0x0f, r1	; 15
 1ae:	77 9b       	sbis	0x0e, 7	; 14
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <LCD_CursorBlinkOff+0x2>
 1b2:	8c e0       	ldi	r24, 0x0C	; 12
 1b4:	8f b9       	out	0x0f, r24	; 15
 1b6:	77 9b       	sbis	0x0e, 7	; 14
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <LCD_CursorBlinkOff+0xa>
 1ba:	80 91 62 00 	lds	r24, 0x0062
 1be:	88 60       	ori	r24, 0x08	; 8
 1c0:	80 93 62 00 	sts	0x0062, r24
 1c4:	80 91 62 00 	lds	r24, 0x0062
 1c8:	87 7f       	andi	r24, 0xF7	; 247
 1ca:	80 93 62 00 	sts	0x0062, r24
 1ce:	8f e8       	ldi	r24, 0x8F	; 143
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD_CursorBlinkOff+0x26>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCD_CursorBlinkOff+0x2c>
 1d8:	00 00       	nop
 1da:	08 95       	ret

000001dc <LCD_MovCursor>:
		
	The cursor will not be moved if an invalid location is provided
*/
void LCD_MovCursor(uint8_t line, uint8_t position) {
	uint8_t addr;
	if (position > 15)
 1dc:	60 31       	cpi	r22, 0x10	; 16
 1de:	20 f4       	brcc	.+8      	; 0x1e8 <LCD_MovCursor+0xc>
		return;
	if (line == 1) {
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	19 f0       	breq	.+6      	; 0x1ea <LCD_MovCursor+0xe>
		addr = 0x80 + position;
	} else if (line == 2) {
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	c9 f0       	breq	.+50     	; 0x21a <LCD_MovCursor+0x3e>
 1e8:	08 95       	ret
void LCD_MovCursor(uint8_t line, uint8_t position) {
	uint8_t addr;
	if (position > 15)
		return;
	if (line == 1) {
		addr = 0x80 + position;
 1ea:	60 58       	subi	r22, 0x80	; 128
		addr = 0xC0 + position;
	} else {
		// invalid line number
		return;
	}
	LCD_CMD(addr);
 1ec:	1f b8       	out	0x0f, r1	; 15
 1ee:	77 9b       	sbis	0x0e, 7	; 14
 1f0:	fe cf       	rjmp	.-4      	; 0x1ee <LCD_MovCursor+0x12>
 1f2:	6f b9       	out	0x0f, r22	; 15
 1f4:	77 9b       	sbis	0x0e, 7	; 14
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <LCD_MovCursor+0x18>
 1f8:	80 91 62 00 	lds	r24, 0x0062
 1fc:	88 60       	ori	r24, 0x08	; 8
 1fe:	80 93 62 00 	sts	0x0062, r24
 202:	80 91 62 00 	lds	r24, 0x0062
 206:	87 7f       	andi	r24, 0xF7	; 247
 208:	80 93 62 00 	sts	0x0062, r24
 20c:	8f e8       	ldi	r24, 0x8F	; 143
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <LCD_MovCursor+0x34>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LCD_MovCursor+0x3a>
 216:	00 00       	nop
 218:	08 95       	ret
	if (position > 15)
		return;
	if (line == 1) {
		addr = 0x80 + position;
	} else if (line == 2) {
		addr = 0xC0 + position;
 21a:	60 54       	subi	r22, 0x40	; 64
 21c:	e7 cf       	rjmp	.-50     	; 0x1ec <LCD_MovCursor+0x10>

0000021e <LCD_FillSpaces>:
		return;
	}
	LCD_CMD(addr);
}

void LCD_FillSpaces(void) {
 21e:	20 e1       	ldi	r18, 0x10	; 16
 220:	30 e0       	ldi	r19, 0x00	; 0
	int count;
	for (count=0; count<=15; count++){
		LCD_DATA(' ');
 222:	41 e0       	ldi	r20, 0x01	; 1
 224:	90 e2       	ldi	r25, 0x20	; 32
 226:	4f b9       	out	0x0f, r20	; 15
 228:	77 9b       	sbis	0x0e, 7	; 14
 22a:	fe cf       	rjmp	.-4      	; 0x228 <LCD_FillSpaces+0xa>
 22c:	9f b9       	out	0x0f, r25	; 15
 22e:	77 9b       	sbis	0x0e, 7	; 14
 230:	fe cf       	rjmp	.-4      	; 0x22e <LCD_FillSpaces+0x10>
 232:	80 91 62 00 	lds	r24, 0x0062
 236:	88 60       	ori	r24, 0x08	; 8
 238:	80 93 62 00 	sts	0x0062, r24
 23c:	80 91 62 00 	lds	r24, 0x0062
 240:	87 7f       	andi	r24, 0xF7	; 247
 242:	80 93 62 00 	sts	0x0062, r24
 246:	ef e8       	ldi	r30, 0x8F	; 143
 248:	f1 e0       	ldi	r31, 0x01	; 1
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCD_FillSpaces+0x2c>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <LCD_FillSpaces+0x32>
 250:	00 00       	nop
 252:	21 50       	subi	r18, 0x01	; 1
 254:	31 09       	sbc	r19, r1
	LCD_CMD(addr);
}

void LCD_FillSpaces(void) {
	int count;
	for (count=0; count<=15; count++){
 256:	39 f7       	brne	.-50     	; 0x226 <LCD_FillSpaces+0x8>
		LCD_DATA(' ');
	}
}
 258:	08 95       	ret

0000025a <LCD_PutDec8>:
	and display the result.
*/
void LCD_PutDec8(uint8_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 100) {
 25a:	84 36       	cpi	r24, 0x64	; 100
 25c:	08 f4       	brcc	.+2      	; 0x260 <LCD_PutDec8+0x6>
 25e:	58 c0       	rjmp	.+176    	; 0x310 <LCD_PutDec8+0xb6>
		digit++;
		num -= 100;
 260:	9c e9       	ldi	r25, 0x9C	; 156
 262:	98 0f       	add	r25, r24
	and display the result.
*/
void LCD_PutDec8(uint8_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 100) {
 264:	94 36       	cpi	r25, 0x64	; 100
 266:	08 f4       	brcc	.+2      	; 0x26a <LCD_PutDec8+0x10>
 268:	56 c0       	rjmp	.+172    	; 0x316 <LCD_PutDec8+0xbc>
		digit++;
		num -= 100;
 26a:	88 5c       	subi	r24, 0xC8	; 200
 26c:	22 e3       	ldi	r18, 0x32	; 50
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	9f b9       	out	0x0f, r25	; 15
 272:	77 9b       	sbis	0x0e, 7	; 14
 274:	fe cf       	rjmp	.-4      	; 0x272 <LCD_PutDec8+0x18>
 276:	2f b9       	out	0x0f, r18	; 15
 278:	77 9b       	sbis	0x0e, 7	; 14
 27a:	fe cf       	rjmp	.-4      	; 0x278 <LCD_PutDec8+0x1e>
 27c:	90 91 62 00 	lds	r25, 0x0062
 280:	98 60       	ori	r25, 0x08	; 8
 282:	90 93 62 00 	sts	0x0062, r25
 286:	90 91 62 00 	lds	r25, 0x0062
 28a:	97 7f       	andi	r25, 0xF7	; 247
 28c:	90 93 62 00 	sts	0x0062, r25
 290:	ef e8       	ldi	r30, 0x8F	; 143
 292:	f1 e0       	ldi	r31, 0x01	; 1
 294:	31 97       	sbiw	r30, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <LCD_PutDec8+0x3a>
 298:	00 c0       	rjmp	.+0      	; 0x29a <LCD_PutDec8+0x40>
 29a:	00 00       	nop
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
 29c:	8a 30       	cpi	r24, 0x0A	; 10
 29e:	b0 f1       	brcs	.+108    	; 0x30c <LCD_PutDec8+0xb2>

/*
	Convert an 8 bit unsigned number to ASCII
	and display the result.
*/
void LCD_PutDec8(uint8_t num) {
 2a0:	90 e0       	ldi	r25, 0x00	; 0
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
		digit++;
 2a2:	9f 5f       	subi	r25, 0xFF	; 255
		num -= 10;
 2a4:	8a 50       	subi	r24, 0x0A	; 10
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
 2a6:	8a 30       	cpi	r24, 0x0A	; 10
 2a8:	e0 f7       	brcc	.-8      	; 0x2a2 <LCD_PutDec8+0x48>
		digit++;
		num -= 10;
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	2f b9       	out	0x0f, r18	; 15
 2ae:	77 9b       	sbis	0x0e, 7	; 14
 2b0:	fe cf       	rjmp	.-4      	; 0x2ae <LCD_PutDec8+0x54>
 2b2:	90 5d       	subi	r25, 0xD0	; 208
 2b4:	9f b9       	out	0x0f, r25	; 15
 2b6:	77 9b       	sbis	0x0e, 7	; 14
 2b8:	fe cf       	rjmp	.-4      	; 0x2b6 <LCD_PutDec8+0x5c>
 2ba:	90 91 62 00 	lds	r25, 0x0062
 2be:	98 60       	ori	r25, 0x08	; 8
 2c0:	90 93 62 00 	sts	0x0062, r25
 2c4:	90 91 62 00 	lds	r25, 0x0062
 2c8:	97 7f       	andi	r25, 0xF7	; 247
 2ca:	90 93 62 00 	sts	0x0062, r25
 2ce:	ef e8       	ldi	r30, 0x8F	; 143
 2d0:	f1 e0       	ldi	r31, 0x01	; 1
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <LCD_PutDec8+0x78>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <LCD_PutDec8+0x7e>
 2d8:	00 00       	nop
 2da:	80 5d       	subi	r24, 0xD0	; 208
	digit = 0;
	while (num >= 1) {
		digit++;
		num -= 1;
	}
	LCD_DATA(digit + 48);
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	9f b9       	out	0x0f, r25	; 15
 2e0:	77 9b       	sbis	0x0e, 7	; 14
 2e2:	fe cf       	rjmp	.-4      	; 0x2e0 <LCD_PutDec8+0x86>
 2e4:	8f b9       	out	0x0f, r24	; 15
 2e6:	77 9b       	sbis	0x0e, 7	; 14
 2e8:	fe cf       	rjmp	.-4      	; 0x2e6 <LCD_PutDec8+0x8c>
 2ea:	80 91 62 00 	lds	r24, 0x0062
 2ee:	88 60       	ori	r24, 0x08	; 8
 2f0:	80 93 62 00 	sts	0x0062, r24
 2f4:	80 91 62 00 	lds	r24, 0x0062
 2f8:	87 7f       	andi	r24, 0xF7	; 247
 2fa:	80 93 62 00 	sts	0x0062, r24
 2fe:	8f e8       	ldi	r24, 0x8F	; 143
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <LCD_PutDec8+0xa8>
 306:	00 c0       	rjmp	.+0      	; 0x308 <LCD_PutDec8+0xae>
 308:	00 00       	nop
}
 30a:	08 95       	ret
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	cd cf       	rjmp	.-102    	; 0x2aa <LCD_PutDec8+0x50>
	while (num >= 10) {
 310:	8a 30       	cpi	r24, 0x0A	; 10
 312:	30 f6       	brcc	.-116    	; 0x2a0 <LCD_PutDec8+0x46>
 314:	e2 cf       	rjmp	.-60     	; 0x2da <LCD_PutDec8+0x80>
	and display the result.
*/
void LCD_PutDec8(uint8_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 100) {
 316:	89 2f       	mov	r24, r25
 318:	21 e3       	ldi	r18, 0x31	; 49
 31a:	a9 cf       	rjmp	.-174    	; 0x26e <LCD_PutDec8+0x14>

0000031c <LCD_PutDec16>:
	and display the result.
*/
void LCD_PutDec16(uint16_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 10000) {
 31c:	80 31       	cpi	r24, 0x10	; 16
 31e:	27 e2       	ldi	r18, 0x27	; 39
 320:	92 07       	cpc	r25, r18
 322:	08 f4       	brcc	.+2      	; 0x326 <LCD_PutDec16+0xa>
 324:	ad c0       	rjmp	.+346    	; 0x480 <LCD_PutDec16+0x164>
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	01 c0       	rjmp	.+2      	; 0x32c <LCD_PutDec16+0x10>
		digit++;
 32a:	23 2f       	mov	r18, r19
 32c:	31 e0       	ldi	r19, 0x01	; 1
 32e:	32 0f       	add	r19, r18
		num -= 10000;
 330:	80 51       	subi	r24, 0x10	; 16
 332:	97 42       	sbci	r25, 0x27	; 39
	and display the result.
*/
void LCD_PutDec16(uint16_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 10000) {
 334:	80 31       	cpi	r24, 0x10	; 16
 336:	47 e2       	ldi	r20, 0x27	; 39
 338:	94 07       	cpc	r25, r20
 33a:	b8 f7       	brcc	.-18     	; 0x32a <LCD_PutDec16+0xe>
		digit++;
		num -= 10000;
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
 33c:	31 e0       	ldi	r19, 0x01	; 1
 33e:	3f b9       	out	0x0f, r19	; 15
 340:	77 9b       	sbis	0x0e, 7	; 14
 342:	fe cf       	rjmp	.-4      	; 0x340 <LCD_PutDec16+0x24>
 344:	2f 5c       	subi	r18, 0xCF	; 207
 346:	2f b9       	out	0x0f, r18	; 15
 348:	77 9b       	sbis	0x0e, 7	; 14
 34a:	fe cf       	rjmp	.-4      	; 0x348 <LCD_PutDec16+0x2c>
 34c:	20 91 62 00 	lds	r18, 0x0062
 350:	28 60       	ori	r18, 0x08	; 8
 352:	20 93 62 00 	sts	0x0062, r18
 356:	20 91 62 00 	lds	r18, 0x0062
 35a:	27 7f       	andi	r18, 0xF7	; 247
 35c:	20 93 62 00 	sts	0x0062, r18
 360:	ef e8       	ldi	r30, 0x8F	; 143
 362:	f1 e0       	ldi	r31, 0x01	; 1
 364:	31 97       	sbiw	r30, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <LCD_PutDec16+0x48>
 368:	00 c0       	rjmp	.+0      	; 0x36a <LCD_PutDec16+0x4e>
 36a:	00 00       	nop
		flag = 1;
	}
	digit = 0;
	while (num >= 1000) {
 36c:	88 3e       	cpi	r24, 0xE8	; 232
 36e:	f3 e0       	ldi	r31, 0x03	; 3
 370:	9f 07       	cpc	r25, r31
 372:	08 f4       	brcc	.+2      	; 0x376 <LCD_PutDec16+0x5a>
 374:	93 c0       	rjmp	.+294    	; 0x49c <LCD_PutDec16+0x180>
*/
void LCD_PutDec16(uint16_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 10000) {
		digit++;
 376:	20 e0       	ldi	r18, 0x00	; 0
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 1000) {
		digit++;
 378:	2f 5f       	subi	r18, 0xFF	; 255
		num -= 1000;
 37a:	88 5e       	subi	r24, 0xE8	; 232
 37c:	93 40       	sbci	r25, 0x03	; 3
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 1000) {
 37e:	88 3e       	cpi	r24, 0xE8	; 232
 380:	33 e0       	ldi	r19, 0x03	; 3
 382:	93 07       	cpc	r25, r19
 384:	c8 f7       	brcc	.-14     	; 0x378 <LCD_PutDec16+0x5c>
		digit++;
		num -= 1000;
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
 386:	31 e0       	ldi	r19, 0x01	; 1
 388:	3f b9       	out	0x0f, r19	; 15
 38a:	77 9b       	sbis	0x0e, 7	; 14
 38c:	fe cf       	rjmp	.-4      	; 0x38a <LCD_PutDec16+0x6e>
 38e:	20 5d       	subi	r18, 0xD0	; 208
 390:	2f b9       	out	0x0f, r18	; 15
 392:	77 9b       	sbis	0x0e, 7	; 14
 394:	fe cf       	rjmp	.-4      	; 0x392 <LCD_PutDec16+0x76>
 396:	20 91 62 00 	lds	r18, 0x0062
 39a:	28 60       	ori	r18, 0x08	; 8
 39c:	20 93 62 00 	sts	0x0062, r18
 3a0:	20 91 62 00 	lds	r18, 0x0062
 3a4:	27 7f       	andi	r18, 0xF7	; 247
 3a6:	20 93 62 00 	sts	0x0062, r18
 3aa:	ef e8       	ldi	r30, 0x8F	; 143
 3ac:	f1 e0       	ldi	r31, 0x01	; 1
 3ae:	31 97       	sbiw	r30, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <LCD_PutDec16+0x92>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <LCD_PutDec16+0x98>
 3b4:	00 00       	nop
		flag = 1;
	}
	digit = 0;
	while (num >= 100) {
 3b6:	84 36       	cpi	r24, 0x64	; 100
 3b8:	91 05       	cpc	r25, r1
 3ba:	08 f4       	brcc	.+2      	; 0x3be <LCD_PutDec16+0xa2>
 3bc:	5d c0       	rjmp	.+186    	; 0x478 <LCD_PutDec16+0x15c>
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
 3be:	20 e0       	ldi	r18, 0x00	; 0
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 100) {
		digit++;
 3c0:	2f 5f       	subi	r18, 0xFF	; 255
		num -= 100;
 3c2:	84 56       	subi	r24, 0x64	; 100
 3c4:	91 09       	sbc	r25, r1
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 100) {
 3c6:	84 36       	cpi	r24, 0x64	; 100
 3c8:	91 05       	cpc	r25, r1
 3ca:	d0 f7       	brcc	.-12     	; 0x3c0 <LCD_PutDec16+0xa4>
		digit++;
		num -= 100;
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
 3cc:	31 e0       	ldi	r19, 0x01	; 1
 3ce:	3f b9       	out	0x0f, r19	; 15
 3d0:	77 9b       	sbis	0x0e, 7	; 14
 3d2:	fe cf       	rjmp	.-4      	; 0x3d0 <LCD_PutDec16+0xb4>
 3d4:	20 5d       	subi	r18, 0xD0	; 208
 3d6:	2f b9       	out	0x0f, r18	; 15
 3d8:	77 9b       	sbis	0x0e, 7	; 14
 3da:	fe cf       	rjmp	.-4      	; 0x3d8 <LCD_PutDec16+0xbc>
 3dc:	20 91 62 00 	lds	r18, 0x0062
 3e0:	28 60       	ori	r18, 0x08	; 8
 3e2:	20 93 62 00 	sts	0x0062, r18
 3e6:	20 91 62 00 	lds	r18, 0x0062
 3ea:	27 7f       	andi	r18, 0xF7	; 247
 3ec:	20 93 62 00 	sts	0x0062, r18
 3f0:	ef e8       	ldi	r30, 0x8F	; 143
 3f2:	f1 e0       	ldi	r31, 0x01	; 1
 3f4:	31 97       	sbiw	r30, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <LCD_PutDec16+0xd8>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <LCD_PutDec16+0xde>
 3fa:	00 00       	nop
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
 3fc:	8a 30       	cpi	r24, 0x0A	; 10
 3fe:	91 05       	cpc	r25, r1
 400:	c8 f1       	brcs	.+114    	; 0x474 <LCD_PutDec16+0x158>
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
 402:	20 e0       	ldi	r18, 0x00	; 0
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
		digit++;
 404:	2f 5f       	subi	r18, 0xFF	; 255
		num -= 10;
 406:	0a 97       	sbiw	r24, 0x0a	; 10
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
 408:	8a 30       	cpi	r24, 0x0A	; 10
 40a:	91 05       	cpc	r25, r1
 40c:	d8 f7       	brcc	.-10     	; 0x404 <LCD_PutDec16+0xe8>
		digit++;
		num -= 10;
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
 40e:	31 e0       	ldi	r19, 0x01	; 1
 410:	3f b9       	out	0x0f, r19	; 15
 412:	77 9b       	sbis	0x0e, 7	; 14
 414:	fe cf       	rjmp	.-4      	; 0x412 <LCD_PutDec16+0xf6>
 416:	20 5d       	subi	r18, 0xD0	; 208
 418:	2f b9       	out	0x0f, r18	; 15
 41a:	77 9b       	sbis	0x0e, 7	; 14
 41c:	fe cf       	rjmp	.-4      	; 0x41a <LCD_PutDec16+0xfe>
 41e:	20 91 62 00 	lds	r18, 0x0062
 422:	28 60       	ori	r18, 0x08	; 8
 424:	20 93 62 00 	sts	0x0062, r18
 428:	20 91 62 00 	lds	r18, 0x0062
 42c:	27 7f       	andi	r18, 0xF7	; 247
 42e:	20 93 62 00 	sts	0x0062, r18
 432:	ef e8       	ldi	r30, 0x8F	; 143
 434:	f1 e0       	ldi	r31, 0x01	; 1
 436:	31 97       	sbiw	r30, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <LCD_PutDec16+0x11a>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <LCD_PutDec16+0x120>
 43c:	00 00       	nop
		flag = 1;
	}
	digit = 0;
	while (num >= 1) {
 43e:	00 97       	sbiw	r24, 0x00	; 0
 440:	e9 f0       	breq	.+58     	; 0x47c <LCD_PutDec16+0x160>
 442:	80 5d       	subi	r24, 0xD0	; 208
		digit++;
		num -= 1;
	}
	LCD_DATA(digit + 48);
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	9f b9       	out	0x0f, r25	; 15
 448:	77 9b       	sbis	0x0e, 7	; 14
 44a:	fe cf       	rjmp	.-4      	; 0x448 <LCD_PutDec16+0x12c>
 44c:	8f b9       	out	0x0f, r24	; 15
 44e:	77 9b       	sbis	0x0e, 7	; 14
 450:	fe cf       	rjmp	.-4      	; 0x44e <LCD_PutDec16+0x132>
 452:	80 91 62 00 	lds	r24, 0x0062
 456:	88 60       	ori	r24, 0x08	; 8
 458:	80 93 62 00 	sts	0x0062, r24
 45c:	80 91 62 00 	lds	r24, 0x0062
 460:	87 7f       	andi	r24, 0xF7	; 247
 462:	80 93 62 00 	sts	0x0062, r24
 466:	8f e8       	ldi	r24, 0x8F	; 143
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <LCD_PutDec16+0x14e>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <LCD_PutDec16+0x154>
 470:	00 00       	nop
}
 472:	08 95       	ret
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	cb cf       	rjmp	.-106    	; 0x40e <LCD_PutDec16+0xf2>
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
 478:	20 e0       	ldi	r18, 0x00	; 0
 47a:	a8 cf       	rjmp	.-176    	; 0x3cc <LCD_PutDec16+0xb0>
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 1) {
 47c:	80 e3       	ldi	r24, 0x30	; 48
 47e:	e2 cf       	rjmp	.-60     	; 0x444 <LCD_PutDec16+0x128>
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 1000) {
 480:	88 3e       	cpi	r24, 0xE8	; 232
 482:	e3 e0       	ldi	r30, 0x03	; 3
 484:	9e 07       	cpc	r25, r30
 486:	08 f0       	brcs	.+2      	; 0x48a <LCD_PutDec16+0x16e>
 488:	76 cf       	rjmp	.-276    	; 0x376 <LCD_PutDec16+0x5a>
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 100) {
 48a:	84 36       	cpi	r24, 0x64	; 100
 48c:	91 05       	cpc	r25, r1
 48e:	08 f0       	brcs	.+2      	; 0x492 <LCD_PutDec16+0x176>
 490:	96 cf       	rjmp	.-212    	; 0x3be <LCD_PutDec16+0xa2>
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
 492:	8a 30       	cpi	r24, 0x0A	; 10
 494:	91 05       	cpc	r25, r1
 496:	08 f0       	brcs	.+2      	; 0x49a <LCD_PutDec16+0x17e>
 498:	b4 cf       	rjmp	.-152    	; 0x402 <LCD_PutDec16+0xe6>
 49a:	d1 cf       	rjmp	.-94     	; 0x43e <LCD_PutDec16+0x122>
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
 49c:	20 e0       	ldi	r18, 0x00	; 0
 49e:	73 cf       	rjmp	.-282    	; 0x386 <LCD_PutDec16+0x6a>

000004a0 <LCD_PutChar>:
/*
	Send an ASCII character to the LCD
	usage: LCD_PutChar('H');
*/
void LCD_PutChar(char a_char) {
	LCD_DATA(a_char);
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	9f b9       	out	0x0f, r25	; 15
 4a4:	77 9b       	sbis	0x0e, 7	; 14
 4a6:	fe cf       	rjmp	.-4      	; 0x4a4 <LCD_PutChar+0x4>
 4a8:	8f b9       	out	0x0f, r24	; 15
 4aa:	77 9b       	sbis	0x0e, 7	; 14
 4ac:	fe cf       	rjmp	.-4      	; 0x4aa <LCD_PutChar+0xa>
 4ae:	80 91 62 00 	lds	r24, 0x0062
 4b2:	88 60       	ori	r24, 0x08	; 8
 4b4:	80 93 62 00 	sts	0x0062, r24
 4b8:	80 91 62 00 	lds	r24, 0x0062
 4bc:	87 7f       	andi	r24, 0xF7	; 247
 4be:	80 93 62 00 	sts	0x0062, r24
 4c2:	8f e8       	ldi	r24, 0x8F	; 143
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <LCD_PutChar+0x26>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <LCD_PutChar+0x2c>
 4cc:	00 00       	nop
 4ce:	08 95       	ret

000004d0 <LCD_PutStr>:
}

/*
	Send an ASCII string to the LCD
*/
void LCD_PutStr(char *lcd_str) {
 4d0:	fc 01       	movw	r30, r24
	uint8_t count;
	for (count=0; count<=(strlen(lcd_str)-1); count++){
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	60 e0       	ldi	r22, 0x00	; 0
		LCD_DATA(lcd_str[count]);
 4d8:	71 e0       	ldi	r23, 0x01	; 1
 4da:	7f b9       	out	0x0f, r23	; 15
 4dc:	77 9b       	sbis	0x0e, 7	; 14
 4de:	fe cf       	rjmp	.-4      	; 0x4dc <LCD_PutStr+0xc>
 4e0:	df 01       	movw	r26, r30
 4e2:	a4 0f       	add	r26, r20
 4e4:	b5 1f       	adc	r27, r21
 4e6:	8c 91       	ld	r24, X
 4e8:	8f b9       	out	0x0f, r24	; 15
 4ea:	77 9b       	sbis	0x0e, 7	; 14
 4ec:	fe cf       	rjmp	.-4      	; 0x4ea <LCD_PutStr+0x1a>
 4ee:	90 91 62 00 	lds	r25, 0x0062
 4f2:	98 60       	ori	r25, 0x08	; 8
 4f4:	90 93 62 00 	sts	0x0062, r25
 4f8:	90 91 62 00 	lds	r25, 0x0062
 4fc:	97 7f       	andi	r25, 0xF7	; 247
 4fe:	90 93 62 00 	sts	0x0062, r25
 502:	8f e8       	ldi	r24, 0x8F	; 143
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <LCD_PutStr+0x36>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <LCD_PutStr+0x3c>
 50c:	00 00       	nop
/*
	Send an ASCII string to the LCD
*/
void LCD_PutStr(char *lcd_str) {
	uint8_t count;
	for (count=0; count<=(strlen(lcd_str)-1); count++){
 50e:	6f 5f       	subi	r22, 0xFF	; 255
 510:	46 2f       	mov	r20, r22
 512:	50 e0       	ldi	r21, 0x00	; 0
 514:	df 01       	movw	r26, r30
 516:	0d 90       	ld	r0, X+
 518:	00 20       	and	r0, r0
 51a:	e9 f7       	brne	.-6      	; 0x516 <LCD_PutStr+0x46>
 51c:	9d 01       	movw	r18, r26
 51e:	2e 1b       	sub	r18, r30
 520:	3f 0b       	sbc	r19, r31
 522:	22 50       	subi	r18, 0x02	; 2
 524:	31 09       	sbc	r19, r1
 526:	24 17       	cp	r18, r20
 528:	35 07       	cpc	r19, r21
 52a:	b8 f6       	brcc	.-82     	; 0x4da <LCD_PutStr+0xa>
		LCD_DATA(lcd_str[count]);
	}
}
 52c:	08 95       	ret

0000052e <LCD_SPIInit>:

void LCD_SPIInit(void) {
	DDRF |= 0x08;  //port F bit 3 is enable for LCD
 52e:	e1 e6       	ldi	r30, 0x61	; 97
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	88 60       	ori	r24, 0x08	; 8
 536:	80 83       	st	Z, r24
	PORTB |= 0x00; //port B initialization for SPI
 538:	88 b3       	in	r24, 0x18	; 24
 53a:	88 bb       	out	0x18, r24	; 24
	DDRB |= 0x07;  //Turn on SS, MOSI, SCLK
 53c:	87 b3       	in	r24, 0x17	; 23
 53e:	87 60       	ori	r24, 0x07	; 7
 540:	87 bb       	out	0x17, r24	; 23
	//Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first
	SPCR = 0x50;
 542:	80 e5       	ldi	r24, 0x50	; 80
 544:	8d b9       	out	0x0d, r24	; 13
	SPSR = 0x01;
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	8e b9       	out	0x0e, r24	; 14
 54a:	08 95       	ret

0000054c <LCD_Init>:
 54c:	80 e8       	ldi	r24, 0x80	; 128
 54e:	85 bf       	out	0x35, r24	; 53
 550:	92 e4       	ldi	r25, 0x42	; 66
 552:	90 93 6d 00 	sts	0x006D, r25
 556:	80 93 6c 00 	sts	0x006C, r24
 55a:	80 91 61 00 	lds	r24, 0x0061
 55e:	88 60       	ori	r24, 0x08	; 8
 560:	80 93 61 00 	sts	0x0061, r24
 564:	88 b3       	in	r24, 0x18	; 24
 566:	88 bb       	out	0x18, r24	; 24
 568:	87 b3       	in	r24, 0x17	; 23
 56a:	87 60       	ori	r24, 0x07	; 7
 56c:	87 bb       	out	0x17, r24	; 23
 56e:	80 e5       	ldi	r24, 0x50	; 80
 570:	8d b9       	out	0x0d, r24	; 13
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	8e b9       	out	0x0e, r24	; 14
 576:	80 91 61 00 	lds	r24, 0x0061
 57a:	88 60       	ori	r24, 0x08	; 8
 57c:	80 93 61 00 	sts	0x0061, r24
 580:	8f e5       	ldi	r24, 0x5F	; 95
 582:	9a ee       	ldi	r25, 0xEA	; 234
 584:	01 97       	sbiw	r24, 0x01	; 1
 586:	f1 f7       	brne	.-4      	; 0x584 <LCD_Init+0x38>
 588:	00 c0       	rjmp	.+0      	; 0x58a <LCD_Init+0x3e>
 58a:	00 00       	nop
 58c:	1f b8       	out	0x0f, r1	; 15
 58e:	77 9b       	sbis	0x0e, 7	; 14
 590:	fe cf       	rjmp	.-4      	; 0x58e <LCD_Init+0x42>
 592:	88 e3       	ldi	r24, 0x38	; 56
 594:	8f b9       	out	0x0f, r24	; 15
 596:	77 9b       	sbis	0x0e, 7	; 14
 598:	fe cf       	rjmp	.-4      	; 0x596 <LCD_Init+0x4a>
 59a:	80 91 62 00 	lds	r24, 0x0062
 59e:	88 60       	ori	r24, 0x08	; 8
 5a0:	80 93 62 00 	sts	0x0062, r24
 5a4:	80 91 62 00 	lds	r24, 0x0062
 5a8:	87 7f       	andi	r24, 0xF7	; 247
 5aa:	80 93 62 00 	sts	0x0062, r24
 5ae:	8f e8       	ldi	r24, 0x8F	; 143
 5b0:	91 e0       	ldi	r25, 0x01	; 1
 5b2:	01 97       	sbiw	r24, 0x01	; 1
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <LCD_Init+0x66>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <LCD_Init+0x6c>
 5b8:	00 00       	nop
 5ba:	8f e1       	ldi	r24, 0x1F	; 31
 5bc:	9e e4       	ldi	r25, 0x4E	; 78
 5be:	01 97       	sbiw	r24, 0x01	; 1
 5c0:	f1 f7       	brne	.-4      	; 0x5be <LCD_Init+0x72>
 5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <LCD_Init+0x78>
 5c4:	00 00       	nop
 5c6:	1f b8       	out	0x0f, r1	; 15
 5c8:	77 9b       	sbis	0x0e, 7	; 14
 5ca:	fe cf       	rjmp	.-4      	; 0x5c8 <LCD_Init+0x7c>
 5cc:	88 e0       	ldi	r24, 0x08	; 8
 5ce:	8f b9       	out	0x0f, r24	; 15
 5d0:	77 9b       	sbis	0x0e, 7	; 14
 5d2:	fe cf       	rjmp	.-4      	; 0x5d0 <LCD_Init+0x84>
 5d4:	80 91 62 00 	lds	r24, 0x0062
 5d8:	88 60       	ori	r24, 0x08	; 8
 5da:	80 93 62 00 	sts	0x0062, r24
 5de:	80 91 62 00 	lds	r24, 0x0062
 5e2:	87 7f       	andi	r24, 0xF7	; 247
 5e4:	80 93 62 00 	sts	0x0062, r24
 5e8:	8f e8       	ldi	r24, 0x8F	; 143
 5ea:	91 e0       	ldi	r25, 0x01	; 1
 5ec:	01 97       	sbiw	r24, 0x01	; 1
 5ee:	f1 f7       	brne	.-4      	; 0x5ec <LCD_Init+0xa0>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <LCD_Init+0xa6>
 5f2:	00 00       	nop
 5f4:	8f e3       	ldi	r24, 0x3F	; 63
 5f6:	9f e1       	ldi	r25, 0x1F	; 31
 5f8:	01 97       	sbiw	r24, 0x01	; 1
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <LCD_Init+0xac>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <LCD_Init+0xb2>
 5fe:	00 00       	nop
 600:	1f b8       	out	0x0f, r1	; 15
 602:	77 9b       	sbis	0x0e, 7	; 14
 604:	fe cf       	rjmp	.-4      	; 0x602 <LCD_Init+0xb6>
 606:	86 e0       	ldi	r24, 0x06	; 6
 608:	8f b9       	out	0x0f, r24	; 15
 60a:	77 9b       	sbis	0x0e, 7	; 14
 60c:	fe cf       	rjmp	.-4      	; 0x60a <LCD_Init+0xbe>
 60e:	80 91 62 00 	lds	r24, 0x0062
 612:	88 60       	ori	r24, 0x08	; 8
 614:	80 93 62 00 	sts	0x0062, r24
 618:	80 91 62 00 	lds	r24, 0x0062
 61c:	87 7f       	andi	r24, 0xF7	; 247
 61e:	80 93 62 00 	sts	0x0062, r24
 622:	8f e8       	ldi	r24, 0x8F	; 143
 624:	91 e0       	ldi	r25, 0x01	; 1
 626:	01 97       	sbiw	r24, 0x01	; 1
 628:	f1 f7       	brne	.-4      	; 0x626 <LCD_Init+0xda>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <LCD_Init+0xe0>
 62c:	00 00       	nop
 62e:	1f b8       	out	0x0f, r1	; 15
 630:	77 9b       	sbis	0x0e, 7	; 14
 632:	fe cf       	rjmp	.-4      	; 0x630 <LCD_Init+0xe4>
 634:	80 e4       	ldi	r24, 0x40	; 64
 636:	8f b9       	out	0x0f, r24	; 15
 638:	77 9b       	sbis	0x0e, 7	; 14
 63a:	fe cf       	rjmp	.-4      	; 0x638 <LCD_Init+0xec>
 63c:	80 91 62 00 	lds	r24, 0x0062
 640:	88 60       	ori	r24, 0x08	; 8
 642:	80 93 62 00 	sts	0x0062, r24
 646:	80 91 62 00 	lds	r24, 0x0062
 64a:	87 7f       	andi	r24, 0xF7	; 247
 64c:	80 93 62 00 	sts	0x0062, r24
 650:	8f e8       	ldi	r24, 0x8F	; 143
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <LCD_Init+0x108>
 658:	00 c0       	rjmp	.+0      	; 0x65a <LCD_Init+0x10e>
 65a:	00 00       	nop
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	8f b9       	out	0x0f, r24	; 15
 660:	77 9b       	sbis	0x0e, 7	; 14
 662:	fe cf       	rjmp	.-4      	; 0x660 <LCD_Init+0x114>
 664:	8e e0       	ldi	r24, 0x0E	; 14
 666:	8f b9       	out	0x0f, r24	; 15
 668:	77 9b       	sbis	0x0e, 7	; 14
 66a:	fe cf       	rjmp	.-4      	; 0x668 <LCD_Init+0x11c>
 66c:	80 91 62 00 	lds	r24, 0x0062
 670:	88 60       	ori	r24, 0x08	; 8
 672:	80 93 62 00 	sts	0x0062, r24
 676:	80 91 62 00 	lds	r24, 0x0062
 67a:	87 7f       	andi	r24, 0xF7	; 247
 67c:	80 93 62 00 	sts	0x0062, r24
 680:	8f e8       	ldi	r24, 0x8F	; 143
 682:	91 e0       	ldi	r25, 0x01	; 1
 684:	01 97       	sbiw	r24, 0x01	; 1
 686:	f1 f7       	brne	.-4      	; 0x684 <LCD_Init+0x138>
 688:	00 c0       	rjmp	.+0      	; 0x68a <LCD_Init+0x13e>
 68a:	00 00       	nop
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	8f b9       	out	0x0f, r24	; 15
 690:	77 9b       	sbis	0x0e, 7	; 14
 692:	fe cf       	rjmp	.-4      	; 0x690 <LCD_Init+0x144>
 694:	8b e1       	ldi	r24, 0x1B	; 27
 696:	8f b9       	out	0x0f, r24	; 15
 698:	77 9b       	sbis	0x0e, 7	; 14
 69a:	fe cf       	rjmp	.-4      	; 0x698 <LCD_Init+0x14c>
 69c:	80 91 62 00 	lds	r24, 0x0062
 6a0:	88 60       	ori	r24, 0x08	; 8
 6a2:	80 93 62 00 	sts	0x0062, r24
 6a6:	80 91 62 00 	lds	r24, 0x0062
 6aa:	87 7f       	andi	r24, 0xF7	; 247
 6ac:	80 93 62 00 	sts	0x0062, r24
 6b0:	8f e8       	ldi	r24, 0x8F	; 143
 6b2:	91 e0       	ldi	r25, 0x01	; 1
 6b4:	01 97       	sbiw	r24, 0x01	; 1
 6b6:	f1 f7       	brne	.-4      	; 0x6b4 <LCD_Init+0x168>
 6b8:	00 c0       	rjmp	.+0      	; 0x6ba <LCD_Init+0x16e>
 6ba:	00 00       	nop
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	8f b9       	out	0x0f, r24	; 15
 6c0:	77 9b       	sbis	0x0e, 7	; 14
 6c2:	fe cf       	rjmp	.-4      	; 0x6c0 <LCD_Init+0x174>
 6c4:	81 e1       	ldi	r24, 0x11	; 17
 6c6:	8f b9       	out	0x0f, r24	; 15
 6c8:	77 9b       	sbis	0x0e, 7	; 14
 6ca:	fe cf       	rjmp	.-4      	; 0x6c8 <LCD_Init+0x17c>
 6cc:	80 91 62 00 	lds	r24, 0x0062
 6d0:	88 60       	ori	r24, 0x08	; 8
 6d2:	80 93 62 00 	sts	0x0062, r24
 6d6:	80 91 62 00 	lds	r24, 0x0062
 6da:	87 7f       	andi	r24, 0xF7	; 247
 6dc:	80 93 62 00 	sts	0x0062, r24
 6e0:	8f e8       	ldi	r24, 0x8F	; 143
 6e2:	91 e0       	ldi	r25, 0x01	; 1
 6e4:	01 97       	sbiw	r24, 0x01	; 1
 6e6:	f1 f7       	brne	.-4      	; 0x6e4 <LCD_Init+0x198>
 6e8:	00 c0       	rjmp	.+0      	; 0x6ea <LCD_Init+0x19e>
 6ea:	00 00       	nop
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	8f b9       	out	0x0f, r24	; 15
 6f0:	77 9b       	sbis	0x0e, 7	; 14
 6f2:	fe cf       	rjmp	.-4      	; 0x6f0 <LCD_Init+0x1a4>
 6f4:	81 e1       	ldi	r24, 0x11	; 17
 6f6:	8f b9       	out	0x0f, r24	; 15
 6f8:	77 9b       	sbis	0x0e, 7	; 14
 6fa:	fe cf       	rjmp	.-4      	; 0x6f8 <LCD_Init+0x1ac>
 6fc:	80 91 62 00 	lds	r24, 0x0062
 700:	88 60       	ori	r24, 0x08	; 8
 702:	80 93 62 00 	sts	0x0062, r24
 706:	80 91 62 00 	lds	r24, 0x0062
 70a:	87 7f       	andi	r24, 0xF7	; 247
 70c:	80 93 62 00 	sts	0x0062, r24
 710:	8f e8       	ldi	r24, 0x8F	; 143
 712:	91 e0       	ldi	r25, 0x01	; 1
 714:	01 97       	sbiw	r24, 0x01	; 1
 716:	f1 f7       	brne	.-4      	; 0x714 <LCD_Init+0x1c8>
 718:	00 c0       	rjmp	.+0      	; 0x71a <LCD_Init+0x1ce>
 71a:	00 00       	nop
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	8f b9       	out	0x0f, r24	; 15
 720:	77 9b       	sbis	0x0e, 7	; 14
 722:	fe cf       	rjmp	.-4      	; 0x720 <LCD_Init+0x1d4>
 724:	81 e1       	ldi	r24, 0x11	; 17
 726:	8f b9       	out	0x0f, r24	; 15
 728:	77 9b       	sbis	0x0e, 7	; 14
 72a:	fe cf       	rjmp	.-4      	; 0x728 <LCD_Init+0x1dc>
 72c:	80 91 62 00 	lds	r24, 0x0062
 730:	88 60       	ori	r24, 0x08	; 8
 732:	80 93 62 00 	sts	0x0062, r24
 736:	80 91 62 00 	lds	r24, 0x0062
 73a:	87 7f       	andi	r24, 0xF7	; 247
 73c:	80 93 62 00 	sts	0x0062, r24
 740:	8f e8       	ldi	r24, 0x8F	; 143
 742:	91 e0       	ldi	r25, 0x01	; 1
 744:	01 97       	sbiw	r24, 0x01	; 1
 746:	f1 f7       	brne	.-4      	; 0x744 <LCD_Init+0x1f8>
 748:	00 c0       	rjmp	.+0      	; 0x74a <LCD_Init+0x1fe>
 74a:	00 00       	nop
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	8f b9       	out	0x0f, r24	; 15
 750:	77 9b       	sbis	0x0e, 7	; 14
 752:	fe cf       	rjmp	.-4      	; 0x750 <LCD_Init+0x204>
 754:	81 e1       	ldi	r24, 0x11	; 17
 756:	8f b9       	out	0x0f, r24	; 15
 758:	77 9b       	sbis	0x0e, 7	; 14
 75a:	fe cf       	rjmp	.-4      	; 0x758 <LCD_Init+0x20c>
 75c:	80 91 62 00 	lds	r24, 0x0062
 760:	88 60       	ori	r24, 0x08	; 8
 762:	80 93 62 00 	sts	0x0062, r24
 766:	80 91 62 00 	lds	r24, 0x0062
 76a:	87 7f       	andi	r24, 0xF7	; 247
 76c:	80 93 62 00 	sts	0x0062, r24
 770:	8f e8       	ldi	r24, 0x8F	; 143
 772:	91 e0       	ldi	r25, 0x01	; 1
 774:	01 97       	sbiw	r24, 0x01	; 1
 776:	f1 f7       	brne	.-4      	; 0x774 <LCD_Init+0x228>
 778:	00 c0       	rjmp	.+0      	; 0x77a <LCD_Init+0x22e>
 77a:	00 00       	nop
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	8f b9       	out	0x0f, r24	; 15
 780:	77 9b       	sbis	0x0e, 7	; 14
 782:	fe cf       	rjmp	.-4      	; 0x780 <LCD_Init+0x234>
 784:	81 e1       	ldi	r24, 0x11	; 17
 786:	8f b9       	out	0x0f, r24	; 15
 788:	77 9b       	sbis	0x0e, 7	; 14
 78a:	fe cf       	rjmp	.-4      	; 0x788 <LCD_Init+0x23c>
 78c:	80 91 62 00 	lds	r24, 0x0062
 790:	88 60       	ori	r24, 0x08	; 8
 792:	80 93 62 00 	sts	0x0062, r24
 796:	80 91 62 00 	lds	r24, 0x0062
 79a:	87 7f       	andi	r24, 0xF7	; 247
 79c:	80 93 62 00 	sts	0x0062, r24
 7a0:	8f e8       	ldi	r24, 0x8F	; 143
 7a2:	91 e0       	ldi	r25, 0x01	; 1
 7a4:	01 97       	sbiw	r24, 0x01	; 1
 7a6:	f1 f7       	brne	.-4      	; 0x7a4 <LCD_Init+0x258>
 7a8:	00 c0       	rjmp	.+0      	; 0x7aa <LCD_Init+0x25e>
 7aa:	00 00       	nop
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	8f b9       	out	0x0f, r24	; 15
 7b0:	77 9b       	sbis	0x0e, 7	; 14
 7b2:	fe cf       	rjmp	.-4      	; 0x7b0 <LCD_Init+0x264>
 7b4:	8f e1       	ldi	r24, 0x1F	; 31
 7b6:	8f b9       	out	0x0f, r24	; 15
 7b8:	77 9b       	sbis	0x0e, 7	; 14
 7ba:	fe cf       	rjmp	.-4      	; 0x7b8 <LCD_Init+0x26c>
 7bc:	80 91 62 00 	lds	r24, 0x0062
 7c0:	88 60       	ori	r24, 0x08	; 8
 7c2:	80 93 62 00 	sts	0x0062, r24
 7c6:	80 91 62 00 	lds	r24, 0x0062
 7ca:	87 7f       	andi	r24, 0xF7	; 247
 7cc:	80 93 62 00 	sts	0x0062, r24
 7d0:	8f e8       	ldi	r24, 0x8F	; 143
 7d2:	91 e0       	ldi	r25, 0x01	; 1
 7d4:	01 97       	sbiw	r24, 0x01	; 1
 7d6:	f1 f7       	brne	.-4      	; 0x7d4 <LCD_Init+0x288>
 7d8:	00 c0       	rjmp	.+0      	; 0x7da <LCD_Init+0x28e>
 7da:	00 00       	nop
 7dc:	1f b8       	out	0x0f, r1	; 15
 7de:	77 9b       	sbis	0x0e, 7	; 14
 7e0:	fe cf       	rjmp	.-4      	; 0x7de <LCD_Init+0x292>
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	8f b9       	out	0x0f, r24	; 15
 7e6:	77 9b       	sbis	0x0e, 7	; 14
 7e8:	fe cf       	rjmp	.-4      	; 0x7e6 <LCD_Init+0x29a>
 7ea:	80 91 62 00 	lds	r24, 0x0062
 7ee:	88 60       	ori	r24, 0x08	; 8
 7f0:	80 93 62 00 	sts	0x0062, r24
 7f4:	80 91 62 00 	lds	r24, 0x0062
 7f8:	87 7f       	andi	r24, 0xF7	; 247
 7fa:	80 93 62 00 	sts	0x0062, r24
 7fe:	8f e8       	ldi	r24, 0x8F	; 143
 800:	91 e0       	ldi	r25, 0x01	; 1
 802:	01 97       	sbiw	r24, 0x01	; 1
 804:	f1 f7       	brne	.-4      	; 0x802 <LCD_Init+0x2b6>
 806:	00 c0       	rjmp	.+0      	; 0x808 <LCD_Init+0x2bc>
 808:	00 00       	nop
 80a:	8f e1       	ldi	r24, 0x1F	; 31
 80c:	9e e4       	ldi	r25, 0x4E	; 78
 80e:	01 97       	sbiw	r24, 0x01	; 1
 810:	f1 f7       	brne	.-4      	; 0x80e <LCD_Init+0x2c2>
 812:	00 c0       	rjmp	.+0      	; 0x814 <LCD_Init+0x2c8>
 814:	00 00       	nop
 816:	1f b8       	out	0x0f, r1	; 15
 818:	77 9b       	sbis	0x0e, 7	; 14
 81a:	fe cf       	rjmp	.-4      	; 0x818 <LCD_Init+0x2cc>
 81c:	8c e0       	ldi	r24, 0x0C	; 12
 81e:	8f b9       	out	0x0f, r24	; 15
 820:	77 9b       	sbis	0x0e, 7	; 14
 822:	fe cf       	rjmp	.-4      	; 0x820 <LCD_Init+0x2d4>
 824:	80 91 62 00 	lds	r24, 0x0062
 828:	88 60       	ori	r24, 0x08	; 8
 82a:	80 93 62 00 	sts	0x0062, r24
 82e:	80 91 62 00 	lds	r24, 0x0062
 832:	87 7f       	andi	r24, 0xF7	; 247
 834:	80 93 62 00 	sts	0x0062, r24
 838:	8f e8       	ldi	r24, 0x8F	; 143
 83a:	91 e0       	ldi	r25, 0x01	; 1
 83c:	01 97       	sbiw	r24, 0x01	; 1
 83e:	f1 f7       	brne	.-4      	; 0x83c <LCD_Init+0x2f0>
 840:	00 c0       	rjmp	.+0      	; 0x842 <LCD_Init+0x2f6>
 842:	00 00       	nop
 844:	08 95       	ret

00000846 <main>:
#include "LCDDriver.h"

enum states {SR_WELCOME, SR_RANDOM_DELAY, SR_TIMING_USER, SR_RESULTS};

int main(void)
{
 846:	cf 93       	push	r28
 848:	df 93       	push	r29
 84a:	00 d0       	rcall	.+0      	; 0x84c <main+0x6>
 84c:	00 d0       	rcall	.+0      	; 0x84e <main+0x8>
 84e:	cd b7       	in	r28, 0x3d	; 61
 850:	de b7       	in	r29, 0x3e	; 62
  uint16_t numticks = 0;
	
  // set default state
  enum states state = SR_WELCOME;
  
  DDRB = 0xFF; PORTB = 0x00; // PORTB is all outputs for LEDs except when used by SPI
 852:	8f ef       	ldi	r24, 0xFF	; 255
 854:	87 bb       	out	0x17, r24	; 23
 856:	18 ba       	out	0x18, r1	; 24
  DDRD = 0x00; // Switches are inputs
 858:	11 ba       	out	0x11, r1	; 17
{
  // Variables
  uint16_t numticks = 0;
	
  // set default state
  enum states state = SR_WELCOME;
 85a:	80 e0       	ldi	r24, 0x00	; 0
 85c:	90 e0       	ldi	r25, 0x00	; 0
enum states {SR_WELCOME, SR_RANDOM_DELAY, SR_TIMING_USER, SR_RESULTS};

int main(void)
{
  // Variables
  uint16_t numticks = 0;
 85e:	00 e0       	ldi	r16, 0x00	; 0
 860:	10 e0       	ldi	r17, 0x00	; 0
        SPCR = 0x00; // disable SPI so that PORTB can be used for LEDs

        // Set up Timer Counter 0   
        TCCR0 = 0;                        //normal mode, clock disabled
        TIMSK = 0;                        //disable _all_ TC0 interrupts	
        TIFR  = (1<<TOV0);                           //manually clear overflow flag
 862:	66 24       	eor	r6, r6
 864:	63 94       	inc	r6

        // start the timer with a 1024 prescaler;  16MHz/1024 = 15.625 KHz
        TCCR0 = 0b111;
 866:	47 e0       	ldi	r20, 0x07	; 7
 868:	54 2e       	mov	r5, r20

       //Need to randomly wait between 2-10 seconds. Since it takes 1.64 ms for
        //the 8 bit timer to overflow, we need to loop between 122-610 times.
        
        //following code is supposedly more random than other methods 
        uint16_t numIterations = rand() / (RAND_MAX / 488 + 1); //pick number between (0 - 487)
 86a:	54 e4       	ldi	r21, 0x44	; 68
 86c:	e5 2e       	mov	r14, r21
 86e:	f1 2c       	mov	r15, r1
      TCCR1B = 0;                //disable noise canceler, set WGM1{3,2} to 0, and disable clock
      TCCR1A = 0;                //disable all output compare pins and set WGM1{1,0} to 0

      TIMSK  = 0;                                 //disable all TCNT1 interrupts in here
      ETIMSK = 0;                                 //and in here
      TIFR   = (1<<TOV1);                         // manually clear the TC1 overflow flag
 870:	64 e0       	ldi	r22, 0x04	; 4
 872:	76 2e       	mov	r7, r22
      TCNT1  = 0;                                 // initialize TCNT counter to 0

      //Count the number of ticks until a button is pressed. Start the timer with a 1024 prescaler.
      //16MHz / 1024 = 15.625 KHz
      TCCR1B = 0b111; // start TC1 counter
      PORTB = 0xFF; // light all LEDs so the user knows to push the button
 874:	cc 24       	eor	r12, r12
 876:	ca 94       	dec	r12

      while ( ((TIFR & (1 << TOV1)) == 0) && (PIND == 0xFF) ) {}; // wait until button pressed or TC1 OVF set
      numticks = TCNT1;
      TCCR1B =                     // stop the TC1 counter
 878:	73 e0       	ldi	r23, 0x03	; 3
 87a:	d7 2e       	mov	r13, r23
      // are 15.625 ticks in a millisecond. We can use this information to determine the user's reaction time.
      PORTB = 0x00; //disable LEDs

      //To compute milliseconds, we multiply by 8/125. Since we are multiplying a 16 bit number,
      //be sure to perform the math using a 32 bit number.
      uint32_t numMilliseconds = ((uint32_t)numticks * 8) / 125;
 87c:	ed e7       	ldi	r30, 0x7D	; 125
 87e:	8e 2e       	mov	r8, r30
 880:	91 2c       	mov	r9, r1
 882:	a1 2c       	mov	r10, r1
 884:	b1 2c       	mov	r11, r1
  
  DDRB = 0xFF; PORTB = 0x00; // PORTB is all outputs for LEDs except when used by SPI
  DDRD = 0x00; // Switches are inputs

  while(1) {
    switch (state) {
 886:	81 30       	cpi	r24, 0x01	; 1
 888:	91 05       	cpc	r25, r1
 88a:	09 f4       	brne	.+2      	; 0x88e <main+0x48>
 88c:	5d c0       	rjmp	.+186    	; 0x948 <main+0x102>
 88e:	81 30       	cpi	r24, 0x01	; 1
 890:	91 05       	cpc	r25, r1
 892:	08 f4       	brcc	.+2      	; 0x896 <main+0x50>
 894:	93 c0       	rjmp	.+294    	; 0x9bc <main+0x176>
 896:	82 30       	cpi	r24, 0x02	; 2
 898:	91 05       	cpc	r25, r1
 89a:	09 f4       	brne	.+2      	; 0x89e <main+0x58>
 89c:	78 c0       	rjmp	.+240    	; 0x98e <main+0x148>
 89e:	83 30       	cpi	r24, 0x03	; 3
 8a0:	91 05       	cpc	r25, r1
 8a2:	89 f7       	brne	.-30     	; 0x886 <main+0x40>
    }
			
    case SR_RESULTS: {
      // Now we compute the results without using floating point arithmetic. The timer runs at 15.625KHz so there 
      // are 15.625 ticks in a millisecond. We can use this information to determine the user's reaction time.
      PORTB = 0x00; //disable LEDs
 8a4:	18 ba       	out	0x18, r1	; 24

      //To compute milliseconds, we multiply by 8/125. Since we are multiplying a 16 bit number,
      //be sure to perform the math using a 32 bit number.
      uint32_t numMilliseconds = ((uint32_t)numticks * 8) / 125;
 8a6:	c8 01       	movw	r24, r16
 8a8:	a0 e0       	ldi	r26, 0x00	; 0
 8aa:	b0 e0       	ldi	r27, 0x00	; 0
 8ac:	88 0f       	add	r24, r24
 8ae:	99 1f       	adc	r25, r25
 8b0:	aa 1f       	adc	r26, r26
 8b2:	bb 1f       	adc	r27, r27
 8b4:	88 0f       	add	r24, r24
 8b6:	99 1f       	adc	r25, r25
 8b8:	aa 1f       	adc	r26, r26
 8ba:	bb 1f       	adc	r27, r27
 8bc:	bc 01       	movw	r22, r24
 8be:	cd 01       	movw	r24, r26
 8c0:	66 0f       	add	r22, r22
 8c2:	77 1f       	adc	r23, r23
 8c4:	88 1f       	adc	r24, r24
 8c6:	99 1f       	adc	r25, r25
 8c8:	a5 01       	movw	r20, r10
 8ca:	94 01       	movw	r18, r8
 8cc:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__udivmodsi4>
	
      LCD_Init();
 8d0:	29 83       	std	Y+1, r18	; 0x01
 8d2:	3a 83       	std	Y+2, r19	; 0x02
 8d4:	4b 83       	std	Y+3, r20	; 0x03
 8d6:	5c 83       	std	Y+4, r21	; 0x04
 8d8:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_Init>
      if (((TIFR & (1 << TOV1)) == 0) && (numMilliseconds == 0)) {
 8dc:	29 81       	ldd	r18, Y+1	; 0x01
 8de:	3a 81       	ldd	r19, Y+2	; 0x02
 8e0:	4b 81       	ldd	r20, Y+3	; 0x03
 8e2:	5c 81       	ldd	r21, Y+4	; 0x04
 8e4:	06 b6       	in	r0, 0x36	; 54
 8e6:	02 fc       	sbrc	r0, 2
 8e8:	06 c0       	rjmp	.+12     	; 0x8f6 <main+0xb0>
 8ea:	21 15       	cp	r18, r1
 8ec:	31 05       	cpc	r19, r1
 8ee:	41 05       	cpc	r20, r1
 8f0:	51 05       	cpc	r21, r1
 8f2:	09 f4       	brne	.+2      	; 0x8f6 <main+0xb0>
 8f4:	8a c0       	rjmp	.+276    	; 0xa0a <main+0x1c4>
      // overflow wasn't triggered but numMilliseconds = 0, the user held down the button
        LCD_PutStr("No cheating!!");
        LCD_MovCursorLn2();
        LCD_PutStr("Retry?");
        _delay_ms(1000);
      } else if ((TIFR & (1 << TOV1)) == 0) {
 8f6:	06 b6       	in	r0, 0x36	; 54
 8f8:	02 fc       	sbrc	r0, 2
 8fa:	7c c0       	rjmp	.+248    	; 0x9f4 <main+0x1ae>
        // overflow wasn't triggered
        // display the time
        LCD_PutStr("Your time:");
 8fc:	89 e4       	ldi	r24, 0x49	; 73
 8fe:	91 e0       	ldi	r25, 0x01	; 1
 900:	29 83       	std	Y+1, r18	; 0x01
 902:	3a 83       	std	Y+2, r19	; 0x02
 904:	4b 83       	std	Y+3, r20	; 0x03
 906:	5c 83       	std	Y+4, r21	; 0x04
 908:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_PutStr>
        LCD_MovCursorLn2();
 90c:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_MovCursorLn2>
        LCD_PutDec16((uint16_t)numMilliseconds);
 910:	29 81       	ldd	r18, Y+1	; 0x01
 912:	3a 81       	ldd	r19, Y+2	; 0x02
 914:	c9 01       	movw	r24, r18
 916:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_PutDec16>
        LCD_PutStr(" ms");
 91a:	84 e5       	ldi	r24, 0x54	; 84
 91c:	91 e0       	ldi	r25, 0x01	; 1
 91e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_PutStr>
        LCD_PutStr("Timer expired.");
        LCD_MovCursorLn2();
        LCD_PutStr("Press btn to rst");
    }
	
    SPCR = 0x00; // disable SPI so that PORTB can be used for LEDs
 922:	1d b8       	out	0x0d, r1	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 924:	2f ef       	ldi	r18, 0xFF	; 255
 926:	85 ea       	ldi	r24, 0xA5	; 165
 928:	9e e0       	ldi	r25, 0x0E	; 14
 92a:	21 50       	subi	r18, 0x01	; 1
 92c:	80 40       	sbci	r24, 0x00	; 0
 92e:	90 40       	sbci	r25, 0x00	; 0
 930:	e1 f7       	brne	.-8      	; 0x92a <main+0xe4>
 932:	00 c0       	rjmp	.+0      	; 0x934 <main+0xee>
 934:	00 00       	nop
    _delay_ms(300); // add delay to avoid switch bouncing issues
    while (PIND == 0xFF) {}; // wait until a button is pressed
 936:	80 b3       	in	r24, 0x10	; 16
 938:	8f 3f       	cpi	r24, 0xFF	; 255
 93a:	e9 f3       	breq	.-6      	; 0x936 <main+0xf0>
    state = SR_RANDOM_DELAY; // move back to the random delay state
 93c:	81 e0       	ldi	r24, 0x01	; 1
 93e:	90 e0       	ldi	r25, 0x00	; 0
  
  DDRB = 0xFF; PORTB = 0x00; // PORTB is all outputs for LEDs except when used by SPI
  DDRD = 0x00; // Switches are inputs

  while(1) {
    switch (state) {
 940:	81 30       	cpi	r24, 0x01	; 1
 942:	91 05       	cpc	r25, r1
 944:	09 f0       	breq	.+2      	; 0x948 <main+0x102>
 946:	a3 cf       	rjmp	.-186    	; 0x88e <main+0x48>
	state = SR_RANDOM_DELAY;  //progress to RANDOM_DELAY state
	break;
    }

      case SR_RANDOM_DELAY: {
        LCD_Init();
 948:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_Init>
        LCD_PutStr("Press any button");
 94c:	82 e1       	ldi	r24, 0x12	; 18
 94e:	91 e0       	ldi	r25, 0x01	; 1
 950:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_PutStr>
        LCD_MovCursorLn2();
 954:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_MovCursorLn2>
        LCD_PutStr("after LEDs light");
 958:	83 e2       	ldi	r24, 0x23	; 35
 95a:	91 e0       	ldi	r25, 0x01	; 1
 95c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_PutStr>
        SPCR = 0x00; // disable SPI so that PORTB can be used for LEDs
 960:	1d b8       	out	0x0d, r1	; 13

        // Set up Timer Counter 0   
        TCCR0 = 0;                        //normal mode, clock disabled
 962:	13 be       	out	0x33, r1	; 51
        TIMSK = 0;                        //disable _all_ TC0 interrupts	
 964:	17 be       	out	0x37, r1	; 55
        TIFR  = (1<<TOV0);                           //manually clear overflow flag
 966:	66 be       	out	0x36, r6	; 54

        // start the timer with a 1024 prescaler;  16MHz/1024 = 15.625 KHz
        TCCR0 = 0b111;
 968:	53 be       	out	0x33, r5	; 51

       //Need to randomly wait between 2-10 seconds. Since it takes 1.64 ms for
        //the 8 bit timer to overflow, we need to loop between 122-610 times.
        
        //following code is supposedly more random than other methods 
        uint16_t numIterations = rand() / (RAND_MAX / 488 + 1); //pick number between (0 - 487)
 96a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <rand>
 96e:	b7 01       	movw	r22, r14
 970:	0e 94 19 05 	call	0xa32	; 0xa32 <__divmodhi4>
        numIterations += 122; //numIterations should now be between (122 - 610)
 974:	66 58       	subi	r22, 0x86	; 134
 976:	7f 4f       	sbci	r23, 0xFF	; 255
    
        do {
    	 while(bit_is_clear(TIFR, TOV0)) {}; //spin till TC0 OVF flag set
 978:	06 b6       	in	r0, 0x36	; 54
 97a:	00 fe       	sbrs	r0, 0
 97c:	fd cf       	rjmp	.-6      	; 0x978 <main+0x132>
    	 TIFR = (1<<TOV0);                   //manually clear TC0 OVF flag
 97e:	66 be       	out	0x36, r6	; 54
   	 //note: the counter will automatically keep counting upward again
   	 numIterations--; // decrement number of iterations
 980:	61 50       	subi	r22, 0x01	; 1
 982:	71 09       	sbc	r23, r1
           } while (numIterations > 0);
 984:	c9 f7       	brne	.-14     	; 0x978 <main+0x132>

        TCCR0 = 0;              //disable the TC0 timer
 986:	13 be       	out	0x33, r1	; 51

        state = SR_TIMING_USER;  //progress to TIMING_USER state
 988:	82 e0       	ldi	r24, 0x02	; 2
 98a:	90 e0       	ldi	r25, 0x00	; 0
        break;
 98c:	7c cf       	rjmp	.-264    	; 0x886 <main+0x40>
    }
    case SR_TIMING_USER: {
      //Set up TCNT1 to measure the user's reaction time
      TCCR1B = 0;                //disable noise canceler, set WGM1{3,2} to 0, and disable clock
 98e:	1e bc       	out	0x2e, r1	; 46
      TCCR1A = 0;                //disable all output compare pins and set WGM1{1,0} to 0
 990:	1f bc       	out	0x2f, r1	; 47

      TIMSK  = 0;                                 //disable all TCNT1 interrupts in here
 992:	17 be       	out	0x37, r1	; 55
      ETIMSK = 0;                                 //and in here
 994:	10 92 7d 00 	sts	0x007D, r1
      TIFR   = (1<<TOV1);                         // manually clear the TC1 overflow flag
 998:	76 be       	out	0x36, r7	; 54
      TCNT1  = 0;                                 // initialize TCNT counter to 0
 99a:	1d bc       	out	0x2d, r1	; 45
 99c:	1c bc       	out	0x2c, r1	; 44

      //Count the number of ticks until a button is pressed. Start the timer with a 1024 prescaler.
      //16MHz / 1024 = 15.625 KHz
      TCCR1B = 0b111; // start TC1 counter
 99e:	5e bc       	out	0x2e, r5	; 46
      PORTB = 0xFF; // light all LEDs so the user knows to push the button
 9a0:	c8 ba       	out	0x18, r12	; 24

      while ( ((TIFR & (1 << TOV1)) == 0) && (PIND == 0xFF) ) {}; // wait until button pressed or TC1 OVF set
 9a2:	03 c0       	rjmp	.+6      	; 0x9aa <main+0x164>
 9a4:	80 b3       	in	r24, 0x10	; 16
 9a6:	8f 3f       	cpi	r24, 0xFF	; 255
 9a8:	19 f4       	brne	.+6      	; 0x9b0 <main+0x16a>
 9aa:	06 b6       	in	r0, 0x36	; 54
 9ac:	02 fe       	sbrs	r0, 2
 9ae:	fa cf       	rjmp	.-12     	; 0x9a4 <main+0x15e>
      numticks = TCNT1;
 9b0:	0c b5       	in	r16, 0x2c	; 44
 9b2:	1d b5       	in	r17, 0x2d	; 45
      TCCR1B =                     // stop the TC1 counter
 9b4:	de bc       	out	0x2e, r13	; 46
      // note that the count is now stored in TCNT1
      state = SR_RESULTS; // progress to RESULTS state
 9b6:	83 e0       	ldi	r24, 0x03	; 3
 9b8:	90 e0       	ldi	r25, 0x00	; 0
      break;
 9ba:	65 cf       	rjmp	.-310    	; 0x886 <main+0x40>
  DDRD = 0x00; // Switches are inputs

  while(1) {
    switch (state) {
      case SR_WELCOME: {
        LCD_Init();
 9bc:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_Init>
       	LCD_PutStr("REFLEX TESTER");
 9c0:	84 e0       	ldi	r24, 0x04	; 4
 9c2:	91 e0       	ldi	r25, 0x01	; 1
 9c4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_PutStr>
       	LCD_MovCursorLn2();
 9c8:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_MovCursorLn2>
       	LCD_PutStr("Press any button");
 9cc:	82 e1       	ldi	r24, 0x12	; 18
 9ce:	91 e0       	ldi	r25, 0x01	; 1
 9d0:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_PutStr>
       	SPCR = 0x00;    //disable SPI so that PORTB can be used for LEDs
 9d4:	1d b8       	out	0x0d, r1	; 13
 9d6:	2f ef       	ldi	r18, 0xFF	; 255
 9d8:	81 ee       	ldi	r24, 0xE1	; 225
 9da:	94 e0       	ldi	r25, 0x04	; 4
 9dc:	21 50       	subi	r18, 0x01	; 1
 9de:	80 40       	sbci	r24, 0x00	; 0
 9e0:	90 40       	sbci	r25, 0x00	; 0
 9e2:	e1 f7       	brne	.-8      	; 0x9dc <main+0x196>
 9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <main+0x1a0>
 9e6:	00 00       	nop
       	_delay_ms(100); //force minimum 100ms display time
       	while (PIND == 0xFF) {};  //spin till button pressed
 9e8:	80 b3       	in	r24, 0x10	; 16
 9ea:	8f 3f       	cpi	r24, 0xFF	; 255
 9ec:	e9 f3       	breq	.-6      	; 0x9e8 <main+0x1a2>
    }
	
    SPCR = 0x00; // disable SPI so that PORTB can be used for LEDs
    _delay_ms(300); // add delay to avoid switch bouncing issues
    while (PIND == 0xFF) {}; // wait until a button is pressed
    state = SR_RANDOM_DELAY; // move back to the random delay state
 9ee:	81 e0       	ldi	r24, 0x01	; 1
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	a6 cf       	rjmp	.-180    	; 0x940 <main+0xfa>
        LCD_PutDec16((uint16_t)numMilliseconds);
        LCD_PutStr(" ms");
      } else {
        // overflow was triggered
        // user took too long
        LCD_PutStr("Timer expired.");
 9f4:	88 e5       	ldi	r24, 0x58	; 88
 9f6:	91 e0       	ldi	r25, 0x01	; 1
 9f8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_PutStr>
        LCD_MovCursorLn2();
 9fc:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_MovCursorLn2>
        LCD_PutStr("Press btn to rst");
 a00:	87 e6       	ldi	r24, 0x67	; 103
 a02:	91 e0       	ldi	r25, 0x01	; 1
 a04:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_PutStr>
 a08:	8c cf       	rjmp	.-232    	; 0x922 <main+0xdc>
      uint32_t numMilliseconds = ((uint32_t)numticks * 8) / 125;
	
      LCD_Init();
      if (((TIFR & (1 << TOV1)) == 0) && (numMilliseconds == 0)) {
      // overflow wasn't triggered but numMilliseconds = 0, the user held down the button
        LCD_PutStr("No cheating!!");
 a0a:	84 e3       	ldi	r24, 0x34	; 52
 a0c:	91 e0       	ldi	r25, 0x01	; 1
 a0e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_PutStr>
        LCD_MovCursorLn2();
 a12:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_MovCursorLn2>
        LCD_PutStr("Retry?");
 a16:	82 e4       	ldi	r24, 0x42	; 66
 a18:	91 e0       	ldi	r25, 0x01	; 1
 a1a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_PutStr>
 a1e:	2f ef       	ldi	r18, 0xFF	; 255
 a20:	83 ed       	ldi	r24, 0xD3	; 211
 a22:	90 e3       	ldi	r25, 0x30	; 48
 a24:	21 50       	subi	r18, 0x01	; 1
 a26:	80 40       	sbci	r24, 0x00	; 0
 a28:	90 40       	sbci	r25, 0x00	; 0
 a2a:	e1 f7       	brne	.-8      	; 0xa24 <main+0x1de>
 a2c:	00 c0       	rjmp	.+0      	; 0xa2e <main+0x1e8>
 a2e:	00 00       	nop
 a30:	78 cf       	rjmp	.-272    	; 0x922 <main+0xdc>

00000a32 <__divmodhi4>:
 a32:	97 fb       	bst	r25, 7
 a34:	07 2e       	mov	r0, r23
 a36:	16 f4       	brtc	.+4      	; 0xa3c <__divmodhi4+0xa>
 a38:	00 94       	com	r0
 a3a:	07 d0       	rcall	.+14     	; 0xa4a <__divmodhi4_neg1>
 a3c:	77 fd       	sbrc	r23, 7
 a3e:	09 d0       	rcall	.+18     	; 0xa52 <__divmodhi4_neg2>
 a40:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__udivmodhi4>
 a44:	07 fc       	sbrc	r0, 7
 a46:	05 d0       	rcall	.+10     	; 0xa52 <__divmodhi4_neg2>
 a48:	3e f4       	brtc	.+14     	; 0xa58 <__divmodhi4_exit>

00000a4a <__divmodhi4_neg1>:
 a4a:	90 95       	com	r25
 a4c:	81 95       	neg	r24
 a4e:	9f 4f       	sbci	r25, 0xFF	; 255
 a50:	08 95       	ret

00000a52 <__divmodhi4_neg2>:
 a52:	70 95       	com	r23
 a54:	61 95       	neg	r22
 a56:	7f 4f       	sbci	r23, 0xFF	; 255

00000a58 <__divmodhi4_exit>:
 a58:	08 95       	ret

00000a5a <__udivmodsi4>:
 a5a:	a1 e2       	ldi	r26, 0x21	; 33
 a5c:	1a 2e       	mov	r1, r26
 a5e:	aa 1b       	sub	r26, r26
 a60:	bb 1b       	sub	r27, r27
 a62:	fd 01       	movw	r30, r26
 a64:	0d c0       	rjmp	.+26     	; 0xa80 <__udivmodsi4_ep>

00000a66 <__udivmodsi4_loop>:
 a66:	aa 1f       	adc	r26, r26
 a68:	bb 1f       	adc	r27, r27
 a6a:	ee 1f       	adc	r30, r30
 a6c:	ff 1f       	adc	r31, r31
 a6e:	a2 17       	cp	r26, r18
 a70:	b3 07       	cpc	r27, r19
 a72:	e4 07       	cpc	r30, r20
 a74:	f5 07       	cpc	r31, r21
 a76:	20 f0       	brcs	.+8      	; 0xa80 <__udivmodsi4_ep>
 a78:	a2 1b       	sub	r26, r18
 a7a:	b3 0b       	sbc	r27, r19
 a7c:	e4 0b       	sbc	r30, r20
 a7e:	f5 0b       	sbc	r31, r21

00000a80 <__udivmodsi4_ep>:
 a80:	66 1f       	adc	r22, r22
 a82:	77 1f       	adc	r23, r23
 a84:	88 1f       	adc	r24, r24
 a86:	99 1f       	adc	r25, r25
 a88:	1a 94       	dec	r1
 a8a:	69 f7       	brne	.-38     	; 0xa66 <__udivmodsi4_loop>
 a8c:	60 95       	com	r22
 a8e:	70 95       	com	r23
 a90:	80 95       	com	r24
 a92:	90 95       	com	r25
 a94:	9b 01       	movw	r18, r22
 a96:	ac 01       	movw	r20, r24
 a98:	bd 01       	movw	r22, r26
 a9a:	cf 01       	movw	r24, r30
 a9c:	08 95       	ret

00000a9e <__udivmodhi4>:
 a9e:	aa 1b       	sub	r26, r26
 aa0:	bb 1b       	sub	r27, r27
 aa2:	51 e1       	ldi	r21, 0x11	; 17
 aa4:	07 c0       	rjmp	.+14     	; 0xab4 <__udivmodhi4_ep>

00000aa6 <__udivmodhi4_loop>:
 aa6:	aa 1f       	adc	r26, r26
 aa8:	bb 1f       	adc	r27, r27
 aaa:	a6 17       	cp	r26, r22
 aac:	b7 07       	cpc	r27, r23
 aae:	10 f0       	brcs	.+4      	; 0xab4 <__udivmodhi4_ep>
 ab0:	a6 1b       	sub	r26, r22
 ab2:	b7 0b       	sbc	r27, r23

00000ab4 <__udivmodhi4_ep>:
 ab4:	88 1f       	adc	r24, r24
 ab6:	99 1f       	adc	r25, r25
 ab8:	5a 95       	dec	r21
 aba:	a9 f7       	brne	.-22     	; 0xaa6 <__udivmodhi4_loop>
 abc:	80 95       	com	r24
 abe:	90 95       	com	r25
 ac0:	bc 01       	movw	r22, r24
 ac2:	cd 01       	movw	r24, r26
 ac4:	08 95       	ret

00000ac6 <do_rand>:
 ac6:	8f 92       	push	r8
 ac8:	9f 92       	push	r9
 aca:	af 92       	push	r10
 acc:	bf 92       	push	r11
 ace:	cf 92       	push	r12
 ad0:	df 92       	push	r13
 ad2:	ef 92       	push	r14
 ad4:	ff 92       	push	r15
 ad6:	cf 93       	push	r28
 ad8:	df 93       	push	r29
 ada:	ec 01       	movw	r28, r24
 adc:	68 81       	ld	r22, Y
 ade:	79 81       	ldd	r23, Y+1	; 0x01
 ae0:	8a 81       	ldd	r24, Y+2	; 0x02
 ae2:	9b 81       	ldd	r25, Y+3	; 0x03
 ae4:	61 15       	cp	r22, r1
 ae6:	71 05       	cpc	r23, r1
 ae8:	81 05       	cpc	r24, r1
 aea:	91 05       	cpc	r25, r1
 aec:	21 f4       	brne	.+8      	; 0xaf6 <do_rand+0x30>
 aee:	64 e2       	ldi	r22, 0x24	; 36
 af0:	79 ed       	ldi	r23, 0xD9	; 217
 af2:	8b e5       	ldi	r24, 0x5B	; 91
 af4:	97 e0       	ldi	r25, 0x07	; 7
 af6:	2d e1       	ldi	r18, 0x1D	; 29
 af8:	33 ef       	ldi	r19, 0xF3	; 243
 afa:	41 e0       	ldi	r20, 0x01	; 1
 afc:	50 e0       	ldi	r21, 0x00	; 0
 afe:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__divmodsi4>
 b02:	49 01       	movw	r8, r18
 b04:	5a 01       	movw	r10, r20
 b06:	9b 01       	movw	r18, r22
 b08:	ac 01       	movw	r20, r24
 b0a:	a7 ea       	ldi	r26, 0xA7	; 167
 b0c:	b1 e4       	ldi	r27, 0x41	; 65
 b0e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__muluhisi3>
 b12:	6b 01       	movw	r12, r22
 b14:	7c 01       	movw	r14, r24
 b16:	ac ee       	ldi	r26, 0xEC	; 236
 b18:	b4 ef       	ldi	r27, 0xF4	; 244
 b1a:	a5 01       	movw	r20, r10
 b1c:	94 01       	movw	r18, r8
 b1e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__mulohisi3>
 b22:	dc 01       	movw	r26, r24
 b24:	cb 01       	movw	r24, r22
 b26:	8c 0d       	add	r24, r12
 b28:	9d 1d       	adc	r25, r13
 b2a:	ae 1d       	adc	r26, r14
 b2c:	bf 1d       	adc	r27, r15
 b2e:	b7 ff       	sbrs	r27, 7
 b30:	03 c0       	rjmp	.+6      	; 0xb38 <do_rand+0x72>
 b32:	01 97       	sbiw	r24, 0x01	; 1
 b34:	a1 09       	sbc	r26, r1
 b36:	b0 48       	sbci	r27, 0x80	; 128
 b38:	88 83       	st	Y, r24
 b3a:	99 83       	std	Y+1, r25	; 0x01
 b3c:	aa 83       	std	Y+2, r26	; 0x02
 b3e:	bb 83       	std	Y+3, r27	; 0x03
 b40:	9f 77       	andi	r25, 0x7F	; 127
 b42:	df 91       	pop	r29
 b44:	cf 91       	pop	r28
 b46:	ff 90       	pop	r15
 b48:	ef 90       	pop	r14
 b4a:	df 90       	pop	r13
 b4c:	cf 90       	pop	r12
 b4e:	bf 90       	pop	r11
 b50:	af 90       	pop	r10
 b52:	9f 90       	pop	r9
 b54:	8f 90       	pop	r8
 b56:	08 95       	ret

00000b58 <rand_r>:
 b58:	0c 94 63 05 	jmp	0xac6	; 0xac6 <do_rand>

00000b5c <rand>:
 b5c:	80 e0       	ldi	r24, 0x00	; 0
 b5e:	91 e0       	ldi	r25, 0x01	; 1
 b60:	0c 94 63 05 	jmp	0xac6	; 0xac6 <do_rand>

00000b64 <srand>:
 b64:	a0 e0       	ldi	r26, 0x00	; 0
 b66:	b0 e0       	ldi	r27, 0x00	; 0
 b68:	80 93 00 01 	sts	0x0100, r24
 b6c:	90 93 01 01 	sts	0x0101, r25
 b70:	a0 93 02 01 	sts	0x0102, r26
 b74:	b0 93 03 01 	sts	0x0103, r27
 b78:	08 95       	ret

00000b7a <__divmodsi4>:
 b7a:	05 2e       	mov	r0, r21
 b7c:	97 fb       	bst	r25, 7
 b7e:	1e f4       	brtc	.+6      	; 0xb86 <__divmodsi4+0xc>
 b80:	00 94       	com	r0
 b82:	0e 94 d4 05 	call	0xba8	; 0xba8 <__negsi2>
 b86:	57 fd       	sbrc	r21, 7
 b88:	07 d0       	rcall	.+14     	; 0xb98 <__divmodsi4_neg2>
 b8a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__udivmodsi4>
 b8e:	07 fc       	sbrc	r0, 7
 b90:	03 d0       	rcall	.+6      	; 0xb98 <__divmodsi4_neg2>
 b92:	4e f4       	brtc	.+18     	; 0xba6 <__divmodsi4_exit>
 b94:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__negsi2>

00000b98 <__divmodsi4_neg2>:
 b98:	50 95       	com	r21
 b9a:	40 95       	com	r20
 b9c:	30 95       	com	r19
 b9e:	21 95       	neg	r18
 ba0:	3f 4f       	sbci	r19, 0xFF	; 255
 ba2:	4f 4f       	sbci	r20, 0xFF	; 255
 ba4:	5f 4f       	sbci	r21, 0xFF	; 255

00000ba6 <__divmodsi4_exit>:
 ba6:	08 95       	ret

00000ba8 <__negsi2>:
 ba8:	90 95       	com	r25
 baa:	80 95       	com	r24
 bac:	70 95       	com	r23
 bae:	61 95       	neg	r22
 bb0:	7f 4f       	sbci	r23, 0xFF	; 255
 bb2:	8f 4f       	sbci	r24, 0xFF	; 255
 bb4:	9f 4f       	sbci	r25, 0xFF	; 255
 bb6:	08 95       	ret

00000bb8 <__muluhisi3>:
 bb8:	0e 94 ef 05 	call	0xbde	; 0xbde <__umulhisi3>
 bbc:	a5 9f       	mul	r26, r21
 bbe:	90 0d       	add	r25, r0
 bc0:	b4 9f       	mul	r27, r20
 bc2:	90 0d       	add	r25, r0
 bc4:	a4 9f       	mul	r26, r20
 bc6:	80 0d       	add	r24, r0
 bc8:	91 1d       	adc	r25, r1
 bca:	11 24       	eor	r1, r1
 bcc:	08 95       	ret

00000bce <__mulshisi3>:
 bce:	b7 ff       	sbrs	r27, 7
 bd0:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__muluhisi3>

00000bd4 <__mulohisi3>:
 bd4:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__muluhisi3>
 bd8:	82 1b       	sub	r24, r18
 bda:	93 0b       	sbc	r25, r19
 bdc:	08 95       	ret

00000bde <__umulhisi3>:
 bde:	a2 9f       	mul	r26, r18
 be0:	b0 01       	movw	r22, r0
 be2:	b3 9f       	mul	r27, r19
 be4:	c0 01       	movw	r24, r0
 be6:	a3 9f       	mul	r26, r19
 be8:	70 0d       	add	r23, r0
 bea:	81 1d       	adc	r24, r1
 bec:	11 24       	eor	r1, r1
 bee:	91 1d       	adc	r25, r1
 bf0:	b2 9f       	mul	r27, r18
 bf2:	70 0d       	add	r23, r0
 bf4:	81 1d       	adc	r24, r1
 bf6:	11 24       	eor	r1, r1
 bf8:	91 1d       	adc	r25, r1
 bfa:	08 95       	ret

00000bfc <_exit>:
 bfc:	f8 94       	cli

00000bfe <__stop_program>:
 bfe:	ff cf       	rjmp	.-2      	; 0xbfe <__stop_program>
