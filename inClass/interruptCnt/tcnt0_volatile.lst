
tcnt0_volatile.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000112  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001a6  2**0
                  ALLOC
  3 .stab         000005dc  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cc3  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001447  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001458  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  0000232c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000280  00000000  00000000  00002349  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_15>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  ac:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <__vector_15>:

//***********************************************************************
//                     ISR for timer counter zero
//***********************************************************************
ISR(TIMER0_COMP_vect) 
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
    tick++;
  c0:	80 91 00 01 	lds	r24, 0x0100
  c4:	8f 5f       	subi	r24, 0xFF	; 255
  c6:	80 93 00 01 	sts	0x0100, r24
}
  ca:	8f 91       	pop	r24
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <init_tcnt0>:
//                           init_tcnt0
// Initalize timer/counter zero to CTC mode
//***********************************************************************
void init_tcnt0()
{
    sei(); // Enable global interrupts
  d6:	78 94       	sei
    // asynchronous status register
    ASSR  |=  (1<<AS0); // Run off external 32khz osc (TOSC)
  d8:	80 b7       	in	r24, 0x30	; 48
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	80 bf       	out	0x30, r24	; 48

    // timer mask
    TIMSK |=  (1<<OCIE0); // Enable interrupts for output compare match 0
  de:	87 b7       	in	r24, 0x37	; 55
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	87 bf       	out	0x37, r24	; 55
 
    // Timer Counter Control Register
    // CTC--clear timer on compare match
    TCCR0 |=  (1<<WGM01) | (1<<CS00); // CTC mode, no prescale 
  e4:	83 b7       	in	r24, 0x33	; 51
  e6:	89 60       	ori	r24, 0x09	; 9
  e8:	83 bf       	out	0x33, r24	; 51

    OCR0  |=  0x07f; // Compare at 128
  ea:	81 b7       	in	r24, 0x31	; 49
  ec:	8f 67       	ori	r24, 0x7F	; 127
  ee:	81 bf       	out	0x31, r24	; 49
  f0:	08 95       	ret

000000f2 <main>:
//***********************************************************************
//                              main
//***********************************************************************
int main() 
{
  DDRB = 0xFF; // Set all port B pins to output
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	87 bb       	out	0x17, r24	; 23
  init_tcnt0(); // Initalize timer counter zero
  f6:	0e 94 6b 00 	call	0xd6	; 0xd6 <init_tcnt0>
  while(1)
  {
    if (tick == 255) { PORTB++; 
  fa:	80 91 00 01 	lds	r24, 0x0100
  fe:	8f 3f       	cpi	r24, 0xFF	; 255
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x8>
 102:	88 b3       	in	r24, 0x18	; 24
 104:	8f 5f       	subi	r24, 0xFF	; 255
 106:	88 bb       	out	0x18, r24	; 24
                       tick = 0; }
 108:	10 92 00 01 	sts	0x0100, r1
 10c:	f6 cf       	rjmp	.-20     	; 0xfa <main+0x8>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
