
lab1_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000144  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001d8  2**0
                  ALLOC
  3 .stab         00000660  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cda  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001512  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001524  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  000023f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000280  00000000  00000000  00002415  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  ac:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <inc_as_bcd>:

    // digit one and two for BCD on PORTB LEDs
    static uint8_t dig1 = 0; 
    static uint8_t dig2 = 0; 

    if (dig1 < 9) { // increment dig1
  b4:	80 91 02 01 	lds	r24, 0x0102
  b8:	89 30       	cpi	r24, 0x09	; 9
  ba:	80 f0       	brcs	.+32     	; 0xdc <inc_as_bcd+0x28>
        dig1 += 1;
        }
    else if (dig2 < 9) { // rollover dig1 // increment dig2
  bc:	80 91 01 01 	lds	r24, 0x0101
        dig1 = 0; 
  c0:	10 92 02 01 	sts	0x0102, r1
    static uint8_t dig2 = 0; 

    if (dig1 < 9) { // increment dig1
        dig1 += 1;
        }
    else if (dig2 < 9) { // rollover dig1 // increment dig2
  c4:	89 30       	cpi	r24, 0x09	; 9
  c6:	20 f0       	brcs	.+8      	; 0xd0 <inc_as_bcd+0x1c>
        dig1 = 0; 
        dig2 += 1;
        }
    else { // rollover both digits
        dig1 = 0;
        dig2 = 0;
  c8:	10 92 01 01 	sts	0x0101, r1
  cc:	80 e0       	ldi	r24, 0x00	; 0
        }

    // return single integer representing the counter as BCD
    return (dig2<<4) | dig1;
    }
  ce:	08 95       	ret
    if (dig1 < 9) { // increment dig1
        dig1 += 1;
        }
    else if (dig2 < 9) { // rollover dig1 // increment dig2
        dig1 = 0; 
        dig2 += 1;
  d0:	8f 5f       	subi	r24, 0xFF	; 255
  d2:	80 93 01 01 	sts	0x0101, r24
  d6:	82 95       	swap	r24
  d8:	80 7f       	andi	r24, 0xF0	; 240
  da:	08 95       	ret
    // digit one and two for BCD on PORTB LEDs
    static uint8_t dig1 = 0; 
    static uint8_t dig2 = 0; 

    if (dig1 < 9) { // increment dig1
        dig1 += 1;
  dc:	8f 5f       	subi	r24, 0xFF	; 255
  de:	80 93 02 01 	sts	0x0102, r24
  e2:	90 91 01 01 	lds	r25, 0x0101
  e6:	40 e1       	ldi	r20, 0x10	; 16
  e8:	94 9f       	mul	r25, r20
  ea:	90 01       	movw	r18, r0
  ec:	11 24       	eor	r1, r1
  ee:	82 2b       	or	r24, r18
  f0:	08 95       	ret

000000f2 <debounce_switch>:

    // button press shift register
    static uint8_t SR = 0; 

    // bit_is_clear() returns a one when button pushed
    SR = (SR << 1) | bit_is_clear(PIND, 0);
  f2:	90 b3       	in	r25, 0x10	; 16
  f4:	80 91 00 01 	lds	r24, 0x0100
  f8:	88 0f       	add	r24, r24
  fa:	90 95       	com	r25
  fc:	91 70       	andi	r25, 0x01	; 1
  fe:	98 2b       	or	r25, r24
 100:	90 93 00 01 	sts	0x0100, r25
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	9f 30       	cpi	r25, 0x0F	; 15
 108:	09 f0       	breq	.+2      	; 0x10c <debounce_switch+0x1a>
 10a:	80 e0       	ldi	r24, 0x00	; 0

    if (SR == 0x0F) { // if shift register = 00001111
        return 1;
        }
    return 0;
    }
 10c:	08 95       	ret

0000010e <main>:
// The BCD count is then displayed on PORTB's LEDs. 
//*******************************************************************************
int main(){

    // set all of PORTB to output
    DDRB = 0xFF;
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	87 bb       	out	0x17, r24	; 23
 112:	c1 e0       	ldi	r28, 0x01	; 1
 114:	06 c0       	rjmp	.+12     	; 0x122 <main+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	8f e3       	ldi	r24, 0x3F	; 63
 118:	9f e1       	ldi	r25, 0x1F	; 31
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0xc>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x12>
 120:	00 00       	nop

    // button press shift register
    static uint8_t SR = 0; 

    // bit_is_clear() returns a one when button pushed
    SR = (SR << 1) | bit_is_clear(PIND, 0);
 122:	80 b3       	in	r24, 0x10	; 16
 124:	90 91 00 01 	lds	r25, 0x0100
 128:	99 0f       	add	r25, r25
 12a:	81 70       	andi	r24, 0x01	; 1
 12c:	8c 27       	eor	r24, r28
 12e:	89 2b       	or	r24, r25
 130:	80 93 00 01 	sts	0x0100, r24

    if (SR == 0x0F) { // if shift register = 00001111
 134:	8f 30       	cpi	r24, 0x0F	; 15
 136:	79 f7       	brne	.-34     	; 0x116 <main+0x8>
    // set all of PORTB to output
    DDRB = 0xFF;

    while(1) { // loop forever
        if (debounce_switch()) { // if switch true for 4 passes, increment PORTB
            PORTB = inc_as_bcd();
 138:	0e 94 5a 00 	call	0xb4	; 0xb4 <inc_as_bcd>
 13c:	88 bb       	out	0x18, r24	; 24
 13e:	eb cf       	rjmp	.-42     	; 0x116 <main+0x8>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
