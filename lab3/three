%!PS-Adobe-3.0
%%Title: lab3.c
%%For: Josh
%%Creator: a2ps version 4.14
%%CreationDate: Mon Nov  2 13:58:06 2015
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 3
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(// OregonState EECS) c n
(// Microcontroller System Design) N
(// lab3_code.c ) N
(// Joshua Reed) N
(// Oct. 20, 2015) N
() p n
(#include) K
( <avr/io.h>) p n
(#include) K
( <avr/interrupt.h>) p n
(#include) K
( <avr/cpufunc.h>) p n
(#include) K
( <util/delay.h>) p n
() N
(volatile) K
( uint8_t flag = 0;) p n
() N
(//******************************************************************************) c n
(*) N
(//                                                          debounce_switch     ) N
(          ) N
(// Check pushbuttons on PORTA. ) N
(// Returns which button was pressed 0-7.) N
(//******************************************************************************) N
(*) N
(uint8_t debounce_switch\(\) ) p n
({) N
(    uint8_t save_a = DDRA;) N
() N
(    ) S
(// DDRA to input) c n
(    DDRA = 0x00;) p n
(    ) S
(// Enable button board ) c n
(    PORTB |= \(7<<4\); ) p n
(    ) N
(    ) S
(// Button press shift register) c n
(    ) p
(static) K
( uint16_t SR[8] = {0,0,0,0,0,0,0,0}; ) p n
(    uint8_t i = 0;) N
(    uint8_t ret_val = 8;) N
() N
(    ) S
(for) K
( \(i=0; i<8; i++\) ) p n
(    {) N
(        ) S
(// bit_is_clear\(\) returns one when button depressed) c n
(        SR[i] = \(SR[i] << 1\) | bit_is_clear\(PINA, i\);) p n
(        ) S
(if) K
( \(SR[i] == 0x000F\) { ret_val = i; }) p n
(    }) N
() N
() N
(    DDRA = save_a; ) N
(    ) S
(return) K
( ret_val;) p n
(}) N
() N
(//******************************************************************************) c n
(*) N
(//                                                          state_check) N
(// Uses a for loop to return the bit number current state. ) N
(// If two state bits are set, this will return a 8 to represent a false.) N
(//******************************************************************************) N
(*) N
(uint8_t state_check\(uint8_t state_reg\)) p n
({) N
(    uint8_t i = 0;) N
(    uint8_t state = 10;) N
(    ) S
(for) K
(\(i=0; i<8; i++\)) p n
(    {) N
(        ) S
(if) K
( \(\(state_reg>>i\)&1\) ) p n
(        {) N
(            ) S
(if) K
( \(state==10\) { state = i; }) p n
(            ) S
(else) K
( {state = 8;}) p n
(        }) N
(    }) N
(    ) S
(return) K
( state;) p n
(}) N
() N
(lab3.c) (Page 1/5) (Nov 02, 15 13:57) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(//******************************************************************************) c n
(*) N
(//                                                          to_digs ) N
(// Returns an array pointer) N
(// The array is a digit wise separation of numbers 0 to 3.) N
(// For example, passing num as 1234 will result in digs[0] = 4, digs[1] = 2, etc) N
(...) N
(//******************************************************************************) N
(*) N
(uint8_t * to_digs\(uint16_t num\) ) p n
({) N
(    ) S
(static) K
( uint8_t digs [4]; ) p
(// Digit place holder) c n
(    ) p
(static) K
( uint8_t sev_seg[11] = { 0b11000000,   ) p
(// 0 // Seven segment decoder a) c n
(rray) N
(                                   0b11111001,   ) p
(// 1) c n
(                                   0b10100100,   ) p
(// 2) c n
(                                   0b10110000,   ) p
(// 3) c n
(                                   0b10011001,   ) p
(// 4) c n
(                                   0b10010010,   ) p
(// 5) c n
(                                   0b10000010,   ) p
(// 6) c n
(                                   0b11111000,   ) p
(// 7) c n
(                                   0b10000000,   ) p
(// 8) c n
(                                   0b10010000,   ) p
(// 9) c n
(                                   0b11111111 }; ) p
(// off) c n
(    ) p
(// Parse and decode digits) c n
(    digs[0] = sev_seg[num       % 10];) p n
(    digs[1] = sev_seg[\(num/10\)  % 10];) N
(    digs[2] = sev_seg[\(num/100\) % 10];) N
(    digs[3] = sev_seg[\(num/1000\)    ];) N
(    ) S
(return) K
( digs;) p n
(}) N
() N
(//******************************************************************************) c n
(*) N
(//                                                          set_disp ) N
(// Set which digit is displayed. ) N
(//******************************************************************************) N
(*) N
(void) k
( set_disp\(uint8_t disp\)) p n
({) N
(    ) S
(static) K
( uint8_t decode[5] = { 0,   ) p
(// 000 disp 0) c n
(                                 1,   ) p
(// 001 disp 1) c n
(                                 3,   ) p
(// 011 colon ) c n
(                                 4,   ) p
(// 100 disp 2) c n
(                                 2 }; ) p
(// 101 disp 3) c n
(            ) p
(//if \( temp<8 \) ) c n
(            ) p
(//{ ) c n
(            ) p
(//    multiplier = temp;) c n
(            ) p
(//    temp2 = state_check\(mult_state\);) c n
(            ) p
(//    if \( \(temp2 > 7\) && \(\(mult_state>>temp\)&1\) \) { mult_state = \(1) c n
(<<temp\); }) N
(            ) p
(//    else {  }) c n
() p n
(            ) S
(//}) c n
(    PORTB = \(decode[disp]<<4\) | \(PORTB & 0b10001111\); ) p n
(}) N
() N
(//******************************************************************************) c n
(*) N
(//                                                          read_spi) N
(// Reads encoder and writes to bar graph) N
(// PIN E 7 is sh/ld which is active low to load) N
(// PIN E 6 is clk_inhibit which inhibits the clock when held high) N
(//******************************************************************************) N
(*) N
(uint8_t spi_cycle\(uint8_t write_val\) ) p n
({) N
(    PORTE = 0b01111111; ) S
(// load data) c n
(    PORTE = 0b10000000; ) p
(// set as shift reg and enable the clk) c n
(lab3.c) (Page 2/5) (Nov 02, 15 13:57) title
border
grestore
(Printed by Josh) rhead
(lab3.c) (1/3) (Monday November 02, 2015) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    SPDR = write_val; ) p
(// Send data) c n
(    ) p
(while) K
( \(bit_is_clear\(SPSR, SPIF\)\){} ) p
(// SPI sreg, sflag) c n
(    PORTB |= 0b00000001; ) p
(// Strobe high) c n
(    PORTB &= 0b11111110; ) p
(// Strobe low) c n
(    ) p
(return) K
( SPDR;) p n
(}) N
() N
(//***********************************************************************) c n
(//                                                          ISR) N
(//) N
(// Executes on TCNTR0 overflow.) N
(// Checks push buttons.) N
(// Checks the rotary encoders via SPI.) N
(// Writes to the bar graph via SPI.) N
(// Increments or decrements cnt variable.) N
(//***********************************************************************) N
(ISR\(TIMER0_OVF_vect\) ) p n
({ ) N
(    flag = 1;) N
(}) N
() N
(//******************************************************************************) c n
(*) N
(//                                                          spi_setup) N
(//) N
(//******************************************************************************) N
(*) N
(void) k
( spi_setup\(\)) p n
({) N
(    SPCR |= \(1 << SPE\) | \(1 << MSTR\); ) S
(// SPI ctr reg -- SPI enable, MSTR) c n
(    SPSR |= \(1 << SPI2X\); ) p
(// SPI status reg -- set clk/2) c n
(}) p n
() N
(//******************************************************************************) c n
(*) N
(//                                                          tcntr_setup) N
(//) N
(//******************************************************************************) N
(*) N
(void) k
( tcntr_setup\(\)) p n
({) N
(    TIMSK |= \(1 << TOIE0\); ) S
(// Enable interrupts) c n
(    TCCR0 |= \(1 << CS02\) | \(1 << CS00\); ) p
(// Normal mode, prescale by 128) c n
(}) p n
() N
(//******************************************************************************) c n
(*) N
(//                                                          main ) N
(// Check active low switches on PORTB.  ) N
(// If low for 4 passes of debounc_switch\(\) increment counter.) N
(// Display number on all four digits of the LED display board.) N
(//******************************************************************************) N
(*) N
(int) k
( main\(\)) p n
({) N
(    uint8_t state = 0;) N
(    uint8_t multiplier = 1;) N
(    uint8_t ec_state = 0;) N
(    uint8_t mult_state = 0;) N
(    uint8_t temp = 0;) N
(    uint8_t temp2 = 0;) N
(    uint8_t temp3 = 0;) N
(    uint8_t ec1_curr = 0;) N
(    uint8_t ec1_prev = 0;) N
(    uint8_t ec2_curr = 0;) N
(    uint8_t ec2_prev = 0;) N
(    uint16_t cnt = 0;) N
() N
(    DDRB = 0b11110111; ) S
(// Set to output except input on spi pin 3) c n
(lab3.c) (Page 3/5) (Nov 02, 15 13:57) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    DDRE = 0xFF; ) p
(// Set to output) c n
(    DDRA = 0xFF; ) p
(// Set to output) c n
() p n
(    sei\(\);) N
(    tcntr_setup\(\);) N
(    spi_setup\(\);) N
(    ) N
(    ) S
(while) K
(\(1\) ) p
(// Loop forever) c n
(    { ) p n
(        ) S
(// Rotate state) c n
(        state++;) p n
(        state %= 4;) N
() N
(        ) S
(// Display one digit per cycle) c n
(        set_disp\(state\);) p n
(        PORTA = to_digs\(cnt\)[state];) N
(        _delay_us\(15\); ) S
(// delay with the leds on) c n
(        PORTA = 0xFF; ) p
(// turn leds off) c n
() p n
(        ) S
(if) K
( \(flag\) ) p n
(        {) N
(            ) S
(// Check buttons) c n
(            temp = debounce_switch\(\);) p n
(            ) N
(            ) S
(if) K
( \( temp<8 \) { mult_state ^= \(1<<temp\); }) p n
(            temp2 = state_check\(mult_state\);) N
(            ) S
(if) K
( \(temp2 > 7\) { multiplier = 0; }) p n
(            ) S
(else) K
( { multiplier = temp2; }) p n
() N
(            ec_state = \(ec_state << 4\); ) S
(// state of encoders) c n
(            ec_state |= ~spi_cycle\(mult_state\);) p n
(            ec1_prev = \(ec_state & 0b00110000\)>>4;) N
(            ec1_curr =  ec_state & 0b00000011;) N
(            ec2_prev = \(ec_state & 0b11000000\)>>6;) N
(            ec2_curr = \(ec_state & 0b00001100\)>>2 ;) N
(            ) S
(if) K
( \(ec1_prev != ec1_curr\) ) p n
(            {) N
(                ) S
(if) K
( \( \(ec1_prev == 0b11\) && \(ec1_curr == 0b01\) \) ) p n
(                { ) S
(// left turn  ) c n
(                    ) p
(if) K
( \(multiplier + cnt >= 1023\) { cnt = 1; } ) p n
(                    ) S
(else) K
( { cnt += multiplier; }) p n
(                }) N
(                ) S
(else) K
( ) p
(if) K
( \( \(ec1_prev == 0b11\) && \(ec1_curr == 0b10\) \) ) p n
(                { ) S
(// right turn   ) c n
(                    ) p
(if) K
( \(multiplier > cnt\) { cnt = 1023; } ) p n
(                    ) S
(else) K
( { cnt -= multiplier; }) p n
(                }) N
(            }) N
(            ) S
(if) K
( \(ec2_prev != ec2_curr\) ) p n
(            {) N
(                ) S
(if) K
( \( \(ec2_prev == 0b11\) && \(ec2_curr == 0b01\) \) ) p n
(                { ) S
(// left turn  ) c n
(                    ) p
(if) K
( \(multiplier + cnt >= 1023\) { cnt = 1; } ) p n
(                    ) S
(else) K
( { cnt += multiplier; }) p n
(                }) N
(                ) S
(else) K
( ) p
(if) K
( \( \(ec2_prev == 0b11\) && \(ec2_curr == 0b10\) \) ) p n
(                { ) S
(// right turn ) c n
(                    ) p
(if) K
( \(multiplier > cnt\) { cnt = 1023; } ) p n
(                    ) S
(else) K
( { cnt -= multiplier; }) p n
(                }) N
(            }) N
(        flag = 0;) N
(        }) N
(    }  ) N
(} ) N
() N
() N
() N
() N
(lab3.c) (Page 4/5) (Nov 02, 15 13:57) title
border
grestore
(Printed by Josh) rhead
(lab3.c) (2/3) (Monday November 02, 2015) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(lab3.c) (Page 5/5) (Nov 02, 15 13:57) title
border
grestore
(Printed by Josh) rhead
(lab3.c) (3/3) (Monday November 02, 2015) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
