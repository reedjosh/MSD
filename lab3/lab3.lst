
lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000456  000004ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000456  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800110  00800110  000004fa  2**0
                  ALLOC
  3 .stab         000009b4  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dd3  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001c83  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c94  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00002450  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  00002b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000280  00000000  00000000  00002b85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e5       	ldi	r30, 0x56	; 86
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 32       	cpi	r26, 0x27	; 39
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 4c 01 	call	0x298	; 0x298 <main>
  c6:	0c 94 29 02 	jmp	0x452	; 0x452 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_16>:
volatile uint8_t tick = 0;
//***********************************************************************
//                     ISR for timer counter zero
//***********************************************************************
ISR(TIMER0_OVF_vect) 
{ 
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
    flag = 1; 
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	80 93 11 01 	sts	0x0111, r24
    tick++;
  e0:	80 91 10 01 	lds	r24, 0x0110
  e4:	8f 5f       	subi	r24, 0xFF	; 255
  e6:	80 93 10 01 	sts	0x0110, r24
}
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <debounce_switch>:
// Check pushbuttons on PORTA. 
// Returns which button was pressed 0-7.
//*******************************************************************************
uint8_t debounce_switch() 
{
    DDRA = 0x00; // DDRA to input
  f6:	1a ba       	out	0x1a, r1	; 26
    PORTB |= (7<<4); // Enable button board
  f8:	88 b3       	in	r24, 0x18	; 24
  fa:	80 67       	ori	r24, 0x70	; 112
  fc:	88 bb       	out	0x18, r24	; 24
  fe:	e7 e1       	ldi	r30, 0x17	; 23
 100:	f1 e0       	ldi	r31, 0x01	; 1
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	70 e0       	ldi	r23, 0x00	; 0
    
    static uint16_t SR[8] = {0,0,0,0,0,0,0,0}; // Button press shift register
    uint8_t i = 0;
    uint8_t ret_val = 9;
 106:	89 e0       	ldi	r24, 0x09	; 9
 108:	05 c0       	rjmp	.+10     	; 0x114 <debounce_switch+0x1e>
 10a:	6f 5f       	subi	r22, 0xFF	; 255
 10c:	7f 4f       	sbci	r23, 0xFF	; 255

    for (i=0; i<8; i++) 
 10e:	68 30       	cpi	r22, 0x08	; 8
 110:	71 05       	cpc	r23, r1
 112:	e9 f0       	breq	.+58     	; 0x14e <debounce_switch+0x58>
    {
        // bit_is_clear() returns one when button depressed
        SR[i] = (SR[i] << 1) | bit_is_clear(PINA, i);
 114:	29 b3       	in	r18, 0x19	; 25
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	06 2e       	mov	r0, r22
 11a:	02 c0       	rjmp	.+4      	; 0x120 <debounce_switch+0x2a>
 11c:	35 95       	asr	r19
 11e:	27 95       	ror	r18
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <debounce_switch+0x26>
 124:	21 70       	andi	r18, 0x01	; 1
 126:	33 27       	eor	r19, r19
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	29 27       	eor	r18, r25
 12c:	40 81       	ld	r20, Z
 12e:	51 81       	ldd	r21, Z+1	; 0x01
 130:	44 0f       	add	r20, r20
 132:	55 1f       	adc	r21, r21
 134:	24 2b       	or	r18, r20
 136:	35 2b       	or	r19, r21
 138:	21 93       	st	Z+, r18
 13a:	31 93       	st	Z+, r19
        if (SR[i] == 0x000F) { ret_val = i; }
 13c:	2f 30       	cpi	r18, 0x0F	; 15
 13e:	31 05       	cpc	r19, r1
 140:	21 f7       	brne	.-56     	; 0x10a <debounce_switch+0x14>
 142:	86 2f       	mov	r24, r22
 144:	6f 5f       	subi	r22, 0xFF	; 255
 146:	7f 4f       	sbci	r23, 0xFF	; 255
    
    static uint16_t SR[8] = {0,0,0,0,0,0,0,0}; // Button press shift register
    uint8_t i = 0;
    uint8_t ret_val = 9;

    for (i=0; i<8; i++) 
 148:	68 30       	cpi	r22, 0x08	; 8
 14a:	71 05       	cpc	r23, r1
 14c:	19 f7       	brne	.-58     	; 0x114 <debounce_switch+0x1e>
        // bit_is_clear() returns one when button depressed
        SR[i] = (SR[i] << 1) | bit_is_clear(PINA, i);
        if (SR[i] == 0x000F) { ret_val = i; }
    }

    DDRA = 0xFF; // set PORTA for output
 14e:	9f ef       	ldi	r25, 0xFF	; 255
 150:	9a bb       	out	0x1a, r25	; 26
    return ret_val;
}
 152:	08 95       	ret

00000154 <to_digs>:
// Returns an array pointer
// The array is a digit wise separation of numbers 0 to 3.
// For example, passing num as 1234 will result in digs[0] = 4, digs[1] = 2, etc...
//*******************************************************************************
uint8_t * to_digs(uint16_t num) 
{
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	ec 01       	movw	r28, r24
                                   0b11111000,   // 7
                                   0b10000000,   // 8
                                   0b10010000,   // 9
                                   0b11111111 }; // off
    // Parse and decode digits
    digs[0] = sev_seg[num       % 10];
 15e:	03 e1       	ldi	r16, 0x13	; 19
 160:	11 e0       	ldi	r17, 0x01	; 1
 162:	9c 01       	movw	r18, r24
 164:	ad ec       	ldi	r26, 0xCD	; 205
 166:	bc ec       	ldi	r27, 0xCC	; 204
 168:	0e 94 1a 02 	call	0x434	; 0x434 <__umulhisi3>
 16c:	ac 01       	movw	r20, r24
 16e:	56 95       	lsr	r21
 170:	47 95       	ror	r20
 172:	56 95       	lsr	r21
 174:	47 95       	ror	r20
 176:	56 95       	lsr	r21
 178:	47 95       	ror	r20
 17a:	9a 01       	movw	r18, r20
 17c:	22 0f       	add	r18, r18
 17e:	33 1f       	adc	r19, r19
 180:	ca 01       	movw	r24, r20
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	82 0f       	add	r24, r18
 190:	93 1f       	adc	r25, r19
 192:	fe 01       	movw	r30, r28
 194:	e8 1b       	sub	r30, r24
 196:	f9 0b       	sbc	r31, r25
 198:	eb 5f       	subi	r30, 0xFB	; 251
 19a:	fe 4f       	sbci	r31, 0xFE	; 254
 19c:	80 81       	ld	r24, Z
 19e:	f8 01       	movw	r30, r16
 1a0:	80 83       	st	Z, r24
    digs[1] = sev_seg[(num/10)  % 10];
 1a2:	9a 01       	movw	r18, r20
 1a4:	0e 94 1a 02 	call	0x434	; 0x434 <__umulhisi3>
 1a8:	96 95       	lsr	r25
 1aa:	87 95       	ror	r24
 1ac:	96 95       	lsr	r25
 1ae:	87 95       	ror	r24
 1b0:	96 95       	lsr	r25
 1b2:	87 95       	ror	r24
 1b4:	9c 01       	movw	r18, r24
 1b6:	22 0f       	add	r18, r18
 1b8:	33 1f       	adc	r19, r19
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	82 0f       	add	r24, r18
 1c8:	93 1f       	adc	r25, r19
 1ca:	48 1b       	sub	r20, r24
 1cc:	59 0b       	sbc	r21, r25
 1ce:	fa 01       	movw	r30, r20
 1d0:	eb 5f       	subi	r30, 0xFB	; 251
 1d2:	fe 4f       	sbci	r31, 0xFE	; 254
 1d4:	80 81       	ld	r24, Z
 1d6:	f8 01       	movw	r30, r16
 1d8:	81 83       	std	Z+1, r24	; 0x01
    digs[2] = sev_seg[(num/100) % 10];
 1da:	9e 01       	movw	r18, r28
 1dc:	36 95       	lsr	r19
 1de:	27 95       	ror	r18
 1e0:	36 95       	lsr	r19
 1e2:	27 95       	ror	r18
 1e4:	ab e7       	ldi	r26, 0x7B	; 123
 1e6:	b4 e1       	ldi	r27, 0x14	; 20
 1e8:	0e 94 1a 02 	call	0x434	; 0x434 <__umulhisi3>
 1ec:	ac 01       	movw	r20, r24
 1ee:	56 95       	lsr	r21
 1f0:	47 95       	ror	r20
 1f2:	9a 01       	movw	r18, r20
 1f4:	ad ec       	ldi	r26, 0xCD	; 205
 1f6:	bc ec       	ldi	r27, 0xCC	; 204
 1f8:	0e 94 1a 02 	call	0x434	; 0x434 <__umulhisi3>
 1fc:	96 95       	lsr	r25
 1fe:	87 95       	ror	r24
 200:	96 95       	lsr	r25
 202:	87 95       	ror	r24
 204:	96 95       	lsr	r25
 206:	87 95       	ror	r24
 208:	9c 01       	movw	r18, r24
 20a:	22 0f       	add	r18, r18
 20c:	33 1f       	adc	r19, r19
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	82 0f       	add	r24, r18
 21c:	93 1f       	adc	r25, r19
 21e:	48 1b       	sub	r20, r24
 220:	59 0b       	sbc	r21, r25
 222:	fa 01       	movw	r30, r20
 224:	eb 5f       	subi	r30, 0xFB	; 251
 226:	fe 4f       	sbci	r31, 0xFE	; 254
 228:	80 81       	ld	r24, Z
 22a:	f8 01       	movw	r30, r16
 22c:	82 83       	std	Z+2, r24	; 0x02
    digs[3] = sev_seg[(num/1000)    ];
 22e:	9e 01       	movw	r18, r28
 230:	36 95       	lsr	r19
 232:	27 95       	ror	r18
 234:	36 95       	lsr	r19
 236:	27 95       	ror	r18
 238:	36 95       	lsr	r19
 23a:	27 95       	ror	r18
 23c:	a5 ec       	ldi	r26, 0xC5	; 197
 23e:	b0 e2       	ldi	r27, 0x20	; 32
 240:	0e 94 1a 02 	call	0x434	; 0x434 <__umulhisi3>
 244:	92 95       	swap	r25
 246:	82 95       	swap	r24
 248:	8f 70       	andi	r24, 0x0F	; 15
 24a:	89 27       	eor	r24, r25
 24c:	9f 70       	andi	r25, 0x0F	; 15
 24e:	89 27       	eor	r24, r25
 250:	fc 01       	movw	r30, r24
 252:	eb 5f       	subi	r30, 0xFB	; 251
 254:	fe 4f       	sbci	r31, 0xFE	; 254
 256:	80 81       	ld	r24, Z
 258:	f8 01       	movw	r30, r16
 25a:	83 83       	std	Z+3, r24	; 0x03
    return digs;
}
 25c:	c8 01       	movw	r24, r16
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	08 95       	ret

00000268 <set_disp>:
    static uint8_t decode[5] = { 0,   // 000 disp 0
                                 1,   // 001 disp 1
                                 3,   // 011 colon 
                                 4,   // 100 disp 2
                                 2 }; // 101 disp 3
    PORTB = (decode[disp]<<4); 
 268:	e8 2f       	mov	r30, r24
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	e0 50       	subi	r30, 0x00	; 0
 26e:	ff 4f       	sbci	r31, 0xFF	; 255
 270:	80 81       	ld	r24, Z
 272:	82 95       	swap	r24
 274:	80 7f       	andi	r24, 0xF0	; 240
 276:	88 bb       	out	0x18, r24	; 24
 278:	08 95       	ret

0000027a <spi_read>:
    // PIN E 6 is clk_inhibit which inhibits the clock when held high
//*******************************************************************************
uint8_t spi_read() 
{
    static uint8_t temp = 0;
    PORTE = 0b01111111; // load data
 27a:	8f e7       	ldi	r24, 0x7F	; 127
 27c:	83 b9       	out	0x03, r24	; 3
    PORTE = 0b10000000; // set as shift reg and enable the clk
 27e:	80 e8       	ldi	r24, 0x80	; 128
 280:	83 b9       	out	0x03, r24	; 3
    SPDR = temp; // Send data
 282:	80 91 12 01 	lds	r24, 0x0112
 286:	8f b9       	out	0x0f, r24	; 15
    while (bit_is_clear(SPSR, SPIF)){} // SPI sreg, sflag
 288:	77 9b       	sbis	0x0e, 7	; 14
 28a:	fe cf       	rjmp	.-4      	; 0x288 <spi_read+0xe>
    PORTB |= 0b00000001; // Strobe high
 28c:	c0 9a       	sbi	0x18, 0	; 24
    PORTB &= 0b11111110; // Strobe low
 28e:	c0 98       	cbi	0x18, 0	; 24
    temp = SPDR;
 290:	8f b1       	in	r24, 0x0f	; 15
 292:	80 93 12 01 	sts	0x0112, r24
    return temp;
}
 296:	08 95       	ret

00000298 <main>:
    uint8_t ec1_prev = 0;
    uint8_t ec2_curr = 0;
    uint8_t ec2_prev = 0;
    uint8_t i = 0;

    DDRB = 0b11110111; // Set to output except input on spi pin 3
 298:	87 ef       	ldi	r24, 0xF7	; 247
 29a:	87 bb       	out	0x17, r24	; 23
    DDRE = 0xFF; // Set to output
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	82 b9       	out	0x02, r24	; 2
    DDRA = 0xFF; // Set to output
 2a0:	8a bb       	out	0x1a, r24	; 26

    sei();
 2a2:	78 94       	sei

    // Setup Timer 0 with interrupts enabled
    TIMSK |= (1 << TOIE0); // Enable interrupts
 2a4:	87 b7       	in	r24, 0x37	; 55
 2a6:	81 60       	ori	r24, 0x01	; 1
 2a8:	87 bf       	out	0x37, r24	; 55
    TCCR0 |= (1 << CS02) | (1 << CS00); // Normal mode, prescale by 128
 2aa:	83 b7       	in	r24, 0x33	; 51
 2ac:	85 60       	ori	r24, 0x05	; 5
 2ae:	83 bf       	out	0x33, r24	; 51

    // Setup SPI
    SPCR |= (1 << SPE) | (1 << MSTR); // SPI ctr reg -- SPI enable, MSTR
 2b0:	8d b1       	in	r24, 0x0d	; 13
 2b2:	80 65       	ori	r24, 0x50	; 80
 2b4:	8d b9       	out	0x0d, r24	; 13
    SPSR |= (1 << SPI2X); // SPI status reg -- set clk/2
 2b6:	70 9a       	sbi	0x0e, 0	; 14
 2b8:	91 e0       	ldi	r25, 0x01	; 1
// If low for 4 passes of debounc_switch() increment counter.
// Display number on all four digits of the LED display board.
//*******************************************************************************
int main()
{
    uint16_t cnt = 0;
 2ba:	e1 2c       	mov	r14, r1
 2bc:	f1 2c       	mov	r15, r1
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	00 e0       	ldi	r16, 0x00	; 0
 2c2:	10 e0       	ldi	r17, 0x00	; 0
 2c4:	c0 e0       	ldi	r28, 0x00	; 0
 2c6:	d0 e0       	ldi	r29, 0x00	; 0

        // Display one digit per cycle
        set_disp(state);
        PORTA = to_digs(cnt)[state];
        _delay_us(15); // delay with the leds on
        PORTA = 0xFF; // turn leds off
 2c8:	aa 24       	eor	r10, r10
 2ca:	aa 94       	dec	r10
    // PIN E 6 is clk_inhibit which inhibits the clock when held high
//*******************************************************************************
uint8_t spi_read() 
{
    static uint8_t temp = 0;
    PORTE = 0b01111111; // load data
 2cc:	ff e7       	ldi	r31, 0x7F	; 127
 2ce:	cf 2e       	mov	r12, r31
    PORTE = 0b10000000; // set as shift reg and enable the clk
 2d0:	a0 e8       	ldi	r26, 0x80	; 128
 2d2:	da 2e       	mov	r13, r26
    
    while(1) // Loop forever
    { 
        // Rotate state
        state++;
        state %= 4;
 2d4:	83 70       	andi	r24, 0x03	; 3
 2d6:	b8 2e       	mov	r11, r24
    static uint8_t decode[5] = { 0,   // 000 disp 0
                                 1,   // 001 disp 1
                                 3,   // 011 colon 
                                 4,   // 100 disp 2
                                 2 }; // 101 disp 3
    PORTB = (decode[disp]<<4); 
 2d8:	92 95       	swap	r25
 2da:	90 7f       	andi	r25, 0xF0	; 240
 2dc:	98 bb       	out	0x18, r25	; 24
                                   0b11111000,   // 7
                                   0b10000000,   // 8
                                   0b10010000,   // 9
                                   0b11111111 }; // off
    // Parse and decode digits
    digs[0] = sev_seg[num       % 10];
 2de:	97 01       	movw	r18, r14
 2e0:	ad ec       	ldi	r26, 0xCD	; 205
 2e2:	bc ec       	ldi	r27, 0xCC	; 204
 2e4:	0e 94 1a 02 	call	0x434	; 0x434 <__umulhisi3>
 2e8:	ac 01       	movw	r20, r24
 2ea:	56 95       	lsr	r21
 2ec:	47 95       	ror	r20
 2ee:	56 95       	lsr	r21
 2f0:	47 95       	ror	r20
 2f2:	56 95       	lsr	r21
 2f4:	47 95       	ror	r20
 2f6:	9a 01       	movw	r18, r20
 2f8:	22 0f       	add	r18, r18
 2fa:	33 1f       	adc	r19, r19
 2fc:	ca 01       	movw	r24, r20
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	82 0f       	add	r24, r18
 30c:	93 1f       	adc	r25, r19
 30e:	f7 01       	movw	r30, r14
 310:	e8 1b       	sub	r30, r24
 312:	f9 0b       	sbc	r31, r25
 314:	eb 5f       	subi	r30, 0xFB	; 251
 316:	fe 4f       	sbci	r31, 0xFE	; 254
 318:	80 81       	ld	r24, Z
 31a:	80 93 13 01 	sts	0x0113, r24
    digs[1] = sev_seg[(num/10)  % 10];
 31e:	9a 01       	movw	r18, r20
 320:	0e 94 1a 02 	call	0x434	; 0x434 <__umulhisi3>
 324:	96 95       	lsr	r25
 326:	87 95       	ror	r24
 328:	96 95       	lsr	r25
 32a:	87 95       	ror	r24
 32c:	96 95       	lsr	r25
 32e:	87 95       	ror	r24
 330:	9c 01       	movw	r18, r24
 332:	22 0f       	add	r18, r18
 334:	33 1f       	adc	r19, r19
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	82 0f       	add	r24, r18
 344:	93 1f       	adc	r25, r19
 346:	48 1b       	sub	r20, r24
 348:	59 0b       	sbc	r21, r25
 34a:	fa 01       	movw	r30, r20
 34c:	eb 5f       	subi	r30, 0xFB	; 251
 34e:	fe 4f       	sbci	r31, 0xFE	; 254
 350:	80 81       	ld	r24, Z
 352:	80 93 14 01 	sts	0x0114, r24
    digs[2] = sev_seg[(num/100) % 10];
 356:	98 01       	movw	r18, r16
 358:	ab e7       	ldi	r26, 0x7B	; 123
 35a:	b4 e1       	ldi	r27, 0x14	; 20
 35c:	0e 94 1a 02 	call	0x434	; 0x434 <__umulhisi3>
 360:	ac 01       	movw	r20, r24
 362:	56 95       	lsr	r21
 364:	47 95       	ror	r20
 366:	9a 01       	movw	r18, r20
 368:	ad ec       	ldi	r26, 0xCD	; 205
 36a:	bc ec       	ldi	r27, 0xCC	; 204
 36c:	0e 94 1a 02 	call	0x434	; 0x434 <__umulhisi3>
 370:	96 95       	lsr	r25
 372:	87 95       	ror	r24
 374:	96 95       	lsr	r25
 376:	87 95       	ror	r24
 378:	96 95       	lsr	r25
 37a:	87 95       	ror	r24
 37c:	9c 01       	movw	r18, r24
 37e:	22 0f       	add	r18, r18
 380:	33 1f       	adc	r19, r19
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	82 0f       	add	r24, r18
 390:	93 1f       	adc	r25, r19
 392:	48 1b       	sub	r20, r24
 394:	59 0b       	sbc	r21, r25
 396:	fa 01       	movw	r30, r20
 398:	eb 5f       	subi	r30, 0xFB	; 251
 39a:	fe 4f       	sbci	r31, 0xFE	; 254
 39c:	80 81       	ld	r24, Z
 39e:	80 93 15 01 	sts	0x0115, r24
    digs[3] = sev_seg[(num/1000)    ];
 3a2:	9e 01       	movw	r18, r28
 3a4:	a5 ec       	ldi	r26, 0xC5	; 197
 3a6:	b0 e2       	ldi	r27, 0x20	; 32
 3a8:	0e 94 1a 02 	call	0x434	; 0x434 <__umulhisi3>
 3ac:	92 95       	swap	r25
 3ae:	82 95       	swap	r24
 3b0:	8f 70       	andi	r24, 0x0F	; 15
 3b2:	89 27       	eor	r24, r25
 3b4:	9f 70       	andi	r25, 0x0F	; 15
 3b6:	89 27       	eor	r24, r25
 3b8:	fc 01       	movw	r30, r24
 3ba:	eb 5f       	subi	r30, 0xFB	; 251
 3bc:	fe 4f       	sbci	r31, 0xFE	; 254
 3be:	80 81       	ld	r24, Z
 3c0:	80 93 16 01 	sts	0x0116, r24
        state++;
        state %= 4;

        // Display one digit per cycle
        set_disp(state);
        PORTA = to_digs(cnt)[state];
 3c4:	eb 2d       	mov	r30, r11
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	ed 5e       	subi	r30, 0xED	; 237
 3ca:	fe 4f       	sbci	r31, 0xFE	; 254
 3cc:	80 81       	ld	r24, Z
 3ce:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d0:	80 e5       	ldi	r24, 0x50	; 80
 3d2:	8a 95       	dec	r24
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <main+0x13a>
        _delay_us(15); // delay with the leds on
        PORTA = 0xFF; // turn leds off
 3d6:	ab ba       	out	0x1b, r10	; 27
        

        if (flag) // If ISR sets flag
 3d8:	80 91 11 01 	lds	r24, 0x0111
 3dc:	88 23       	and	r24, r24
 3de:	09 f1       	breq	.+66     	; 0x422 <main+0x18a>
        {
            flag = 0;
 3e0:	10 92 11 01 	sts	0x0111, r1

            // Check buttons
            if (debounce_switch()<8) { cnt++; }
 3e4:	0e 94 7b 00 	call	0xf6	; 0xf6 <debounce_switch>
 3e8:	88 30       	cpi	r24, 0x08	; 8
 3ea:	78 f4       	brcc	.+30     	; 0x40a <main+0x172>
 3ec:	8f ef       	ldi	r24, 0xFF	; 255
 3ee:	e8 1a       	sub	r14, r24
 3f0:	f8 0a       	sbc	r15, r24
 3f2:	87 01       	movw	r16, r14
 3f4:	16 95       	lsr	r17
 3f6:	07 95       	ror	r16
 3f8:	16 95       	lsr	r17
 3fa:	07 95       	ror	r16
 3fc:	e7 01       	movw	r28, r14
 3fe:	d6 95       	lsr	r29
 400:	c7 95       	ror	r28
 402:	d6 95       	lsr	r29
 404:	c7 95       	ror	r28
 406:	d6 95       	lsr	r29
 408:	c7 95       	ror	r28
    // PIN E 6 is clk_inhibit which inhibits the clock when held high
//*******************************************************************************
uint8_t spi_read() 
{
    static uint8_t temp = 0;
    PORTE = 0b01111111; // load data
 40a:	c3 b8       	out	0x03, r12	; 3
    PORTE = 0b10000000; // set as shift reg and enable the clk
 40c:	d3 b8       	out	0x03, r13	; 3
    SPDR = temp; // Send data
 40e:	80 91 12 01 	lds	r24, 0x0112
 412:	8f b9       	out	0x0f, r24	; 15
    while (bit_is_clear(SPSR, SPIF)){} // SPI sreg, sflag
 414:	77 9b       	sbis	0x0e, 7	; 14
 416:	fe cf       	rjmp	.-4      	; 0x414 <main+0x17c>
    PORTB |= 0b00000001; // Strobe high
 418:	c0 9a       	sbi	0x18, 0	; 24
    PORTB &= 0b11111110; // Strobe low
 41a:	c0 98       	cbi	0x18, 0	; 24
    temp = SPDR;
 41c:	8f b1       	in	r24, 0x0f	; 15
 41e:	80 93 12 01 	sts	0x0112, r24
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	8b 0d       	add	r24, r11
 426:	e8 2f       	mov	r30, r24
 428:	e3 70       	andi	r30, 0x03	; 3
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	e0 50       	subi	r30, 0x00	; 0
 42e:	ff 4f       	sbci	r31, 0xFF	; 255
 430:	90 81       	ld	r25, Z
 432:	50 cf       	rjmp	.-352    	; 0x2d4 <main+0x3c>

00000434 <__umulhisi3>:
 434:	a2 9f       	mul	r26, r18
 436:	b0 01       	movw	r22, r0
 438:	b3 9f       	mul	r27, r19
 43a:	c0 01       	movw	r24, r0
 43c:	a3 9f       	mul	r26, r19
 43e:	70 0d       	add	r23, r0
 440:	81 1d       	adc	r24, r1
 442:	11 24       	eor	r1, r1
 444:	91 1d       	adc	r25, r1
 446:	b2 9f       	mul	r27, r18
 448:	70 0d       	add	r23, r0
 44a:	81 1d       	adc	r24, r1
 44c:	11 24       	eor	r1, r1
 44e:	91 1d       	adc	r25, r1
 450:	08 95       	ret

00000452 <_exit>:
 452:	f8 94       	cli

00000454 <__stop_program>:
 454:	ff cf       	rjmp	.-2      	; 0x454 <__stop_program>
